{
  "sdp": {
    "sdp_workspace": [
      {
        "db_classname": "org.h2.Driver",
        "db_database": "",
        "db_host": "",
        "db_password": "",
        "db_username": "",
        "id": null,
        "name": null
      }
    ],
    "sdp_workspace_config": [
      {
        "id": null,
        "name": "author",
        "value": "SDP",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "exception",
        "value": "Exception",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_class_extends_request",
        "value": "extends BaseRequest",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_import_exception",
        "value": "import java.lang.Exception;",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_import_extends_request",
        "value": "import cn.mysdp.biz.dto.request.BaseRequest;",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_controller",
        "value": "cn.mysdp.biz.controller",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_convert",
        "value": "cn.mysdp.biz.convert",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dao",
        "value": "cn.mysdp.biz.domain",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_facade",
        "value": "cn.mysdp.biz.facade",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_facade_impl",
        "value": "cn.mysdp.biz.facade",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_mapper",
        "value": "cn.mysdp.biz.repository",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_request",
        "value": "cn.mysdp.biz.dto.request",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_response",
        "value": "cn.mysdp.biz.dto.response",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "version",
        "value": "1.0",
        "workspace_name": null
      }
    ],
    "sdp_project": [
      {
        "id": null,
        "name": "api",
        "remark": "sdp_workspace,sdp_workspace_config, sdp_project,sdp_template,sdp_sql,sdp_history",
        "root_path": "(root)\\server\\sdp",
        "tables": "sdp_workspace,sdp_workspace_config, sdp_project,sdp_template,sdp_sql,sdp_history",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "biz",
        "remark": "",
        "root_path": "(root)\\server\\sdp",
        "tables": "sdp_workspace,sdp_workspace_config, sdp_project,sdp_template,sdp_sql,sdp_history",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "dao",
        "remark": "",
        "root_path": "(root)\\server\\sdp",
        "tables": "sdp_workspace,sdp_workspace_config, sdp_project,sdp_template,sdp_sql,sdp_history",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "vue",
        "remark": "",
        "root_path": "(root)\\web",
        "tables": "",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "web",
        "remark": "",
        "root_path": "(root)\\server\\sdp",
        "tables": "sdp_workspace,sdp_workspace_config, sdp_project,sdp_template,sdp_sql,sdp_history",
        "workspace_name": null
      }
    ],
    "sdp_template": [
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: AddRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&discard=update_time,create_time&is_auto_increment=0&extra_request_columns=add}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "        {*columns&extra_request_columns=add&is_only_request_columns=1&param_is_nullable=0}",
          "        super.checkNonNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}AddRequest",
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "{config&name=java_import_extends_request}",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: UpdateRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&discard=create_time,update_time&extra_request_columns=update}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    {*columns&only_primary_key=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}s\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}s\")",
          "    private List<{column_java_type}> {column_name&is_first_lower=1}s;",
          "",
          "    {*}",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "        {*columns&only_primary_key=1}",
          "        super.checkNonNull({column_name&is_first_lower=1}s, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}BatchUpdateRequest",
        "no_overwrite": 0,
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: DeleteRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_primary_key=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private List<{column_java_type}> {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "        {*columns&is_primary_key=1}",
          "        super.checkNonNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}DeleteRequest",
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_request}.*;",
          "import {config&name=package_response}.*;",
          "import java.util.List;",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: Facade",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public interface {file_name} {",
          "    int add{alias_table_name}({alias_table_name}AddRequest request) throws {config&name=exception};",
          "",
          "    int update{alias_table_name}({alias_table_name}UpdateRequest request) throws {config&name=exception};",
          "",
          "    int batchUpdate{alias_table_name}({alias_table_name}BatchUpdateRequest request) throws Exception;",
          "",
          "    int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws {config&name=exception};",
          "",
          "    {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    List<{alias_table_name}QueryResponse> list{alias_table_name}WithBLOBs({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    List<{alias_table_name}QueryResponse> list{alias_table_name}ByExample({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    List<{alias_table_name}QueryResponse> list{alias_table_name}ByExampleWithBLOBs({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    int count{alias_table_name}ByExample({alias_table_name}QueryRequest request) throws {config&name=exception};",
          "",
          "    {*sqls}",
          "    List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}{column_method_name}Request request) throws {config&name=exception};",
          "",
          "    int count{column_method_name}({alias_table_name}{column_method_name}Request request) throws {config&name=exception};",
          "",
          "    List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception};",
          "",
          "    int count{column_method_name}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception};",
          "",
          "    {*}",
          "    {*methods}",
          "    {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws {config&name=exception};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Facade",
        "package_name": "{config&name=package_facade}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: QueryRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}QueryRequest",
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.io.Serializable;",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: QueryResponse",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&extra_response_columns=query}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}QueryResponse",
        "package_name": "{config&name=package_response}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: UpdateRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&discard=create_time,update_time&extra_request_columns=update}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "        {*columns&only_primary_key=1}",
          "        super.checkNonNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}UpdateRequest",
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1&include_param_columns=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: SQLRequest",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} {config&name=java_class_extends_request} {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    public {file_name}() {",
          "    }",
          "",
          "    {*columns&is_only_param_columns=1}",
          "    {*column&column_is_first=1}",
          "    public {file_name}(",
          "        {*columns&is_only_param_columns=1}",
          "        {column_java_type} {column_name&is_first_lower=1}{value&value=,&column_is_last=0}",
          "        {*}",
          "    ) {",
          "        {*columns&is_only_param_columns=1}",
          "        this.{column_name&is_first_lower=1} = {column_name&is_first_lower=1};",
          "        {*}",
          "    }",
          "    {*}",
          "    {*}",
          "",
          "    {*columns&include_param_columns=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @JsonProperty(\"id_list\")",
          "    @JSONField(name = \"id_list\")",
          "    private List<Integer> idList;",
          "",
          "    @Override",
          "    public void checkRequest() throws Exception {",
          "        {*columns&is_only_param_columns=1&param_is_nullable=0}",
          "        super.checkNonNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    ",
          "        {*columns&is_only_param_columns=1&param_is_like=1}",
          "        if(null != {column_name&is_first_lower=1}) {",
          "            {column_name&is_first_lower=1} = \"%\" + {column_name&is_first_lower=1} + \"%\";",
          "        }",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}{sql_name}Request",
        "package_name": "{config&name=package_request}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.io.Serializable;",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: SQLResponse",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}{sql_name}Response",
        "package_name": "{config&name=package_response}",
        "project": "src/main/java",
        "project_name": "api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao}.*;",
          "import {config&name=package_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: AddRequestConvert",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}WithBLOBs convert({alias_table_name}AddRequest request) {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}AddRequestConvert",
        "package_name": "{config&name=package_convert}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_convert}.*;",
          "import {config&name=package_dao}.*;",
          "import {config&name=package_request}.*;",
          "import {config&name=package_response}.*;",
          "import {config&name=package_mapper}.*;",
          "",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.HashMap;",
          "import java.util.List;",
          "import java.util.Map;",
          "import org.springframework.beans.BeanUtils;",
          "import org.springframework.beans.factory.annotation.Autowired;",
          "import org.springframework.transaction.annotation.Transactional;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: FacadeBaseImpl",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends BaseFacadeImpl implements {alias_table_name}Facade {",
          "    @Autowired",
          "    {alias_table_name}Mapper {alias_table_name&is_first_lower=1}Mapper;",
          "",
          "    public static Map<String, String> uniqueFieldMap = initUniqueFieldMap();",
          "",
          "    public static Map initUniqueFieldMap() {",
          "        HashMap map = new HashMap<>();",
          "        {*unique_keys}",
          "        map.put(\"{column_name&is_ajax=1}\", \"{column_comment}\");",
          "        {*}",
          "        return map;",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int add{alias_table_name}({alias_table_name}AddRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}AddRequestConvert().convert(request);",
          "        int result = 0;",
          "        try {",
          "            result = {alias_table_name&is_first_lower=1}Mapper.insertSelective(daoRequest);",
          "        }catch(Exception ex) {",
          "            throw checkDBDupException(ex, uniqueFieldMap);",
          "        }",
          "        if (result > 0) {",
          "            {*columns&is_auto_increment=1}",
          "            {*column&column_is_first=1}",
          "            return daoRequest.get{column_name}();",
          "            {*}",
          "            {*}",
          "            {*table&has_auto_increment=0}",
          "            return 1;",
          "            {*}",
          "        }",
          "        return result;",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int update{alias_table_name}({alias_table_name}UpdateRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}UpdateRequestConvert().convert(request);",
          "        {alias_table_name}WithBLOBs record = {alias_table_name&is_first_lower=1}Mapper.selectByPrimaryKeyWithBLOBs(",
          "                {*columns&only_primary_key=1}",
          "                request.get{column_name}()",
          "                {value&value=,&column_is_last=0}",
          "                {*}",
          "        );",
          "        if (record == null) {",
          "            throw new Exception(\"{alias_table_name}记录不存在:\"+",
          "                {*columns&only_primary_key=1}",
          "                request.get{column_name}()",
          "                {value&value=,&column_is_last=0}",
          "                {*}",
          "            );",
          "        }",
          "        int result = 0;",
          "        try {",
          "            result = {alias_table_name&is_first_lower=1}Mapper.updateByPrimaryKeySelective(daoRequest);",
          "        }catch(Exception ex) {",
          "            throw checkDBDupException(ex, uniqueFieldMap);",
          "        }",
          "        if (result > 0) {",
          "            addHistory(record, \"{alias_table_name&is_ajax=1}\");",
          "            return result;",
          "        }",
          "        throw createUpdateFailException();",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int batchUpdate{alias_table_name}({alias_table_name}BatchUpdateRequest request) throws {config&name=exception} {",
          "        int result = 0;",
          "        {alias_table_name}UpdateRequest destRequest = new {alias_table_name}UpdateRequest();",
          "        BeanUtils.copyProperties(request, destRequest);",
          "        for(int id : request.getIds()) {",
          "            destRequest.setId(id);",
          "            result += update{alias_table_name}(destRequest);",
          "        }",
          "        return result;",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws {config&name=exception} {",
          "        BaseRequest baseRequest = new BaseRequest();",
          "        BeanUtils.copyProperties(request, baseRequest);",
          "        ",
          "        {*columns&is_primary_key=1}",
          "        {*column&column_is_first=1}",
          "        for(int i = 0; i < request.get{column_name}().size(); i++) {",
          "            {alias_table_name}WithBLOBs record = {alias_table_name&is_first_lower=1}Mapper.selectByPrimaryKeyWithBLOBs(",
          "                {*columns&only_primary_key=1}",
          "                request.get{column_name}().get(i)",
          "                {value&value=,&column_is_last=0}",
          "                {*}",
          "            );",
          "            if (record != null) {",
          "                addHistory(record, \"{alias_table_name&is_ajax=1}\");",
          "                {alias_table_name&is_first_lower=1}Mapper.deleteByPrimaryKey(",
          "                                {*columns&only_primary_key=1}",
          "                {*column}",
          "                            request.get{column_name}().get(i)",
          "                {*}",
          "                {value&value=,&column_is_last=0}",
          "                {*}",
          "                );",
          "            }",
          "        }",
          "        {*}",
          "        {*}",
          "        {*columns&is_primary_key=1}",
          "        {*column&column_is_first=1}",
          "        return request.get{column_name}().size();",
          "        {*}",
          "        {*}",
          "    }",
          "",
          "    @Override",
          "    public {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {*columns&only_primary_key=1}",
          "        {*column&column_is_first=1}",
          "        {alias_table_name}WithBLOBs daoResponse = {alias_table_name&is_first_lower=1}Mapper.selectByPrimaryKeyWithBLOBs(",
          "            {*columns&only_primary_key=1}",
          "            request.get{column_name}(){value&value=,&column_is_last=0}",
          "            {*}",
          "        );",
          "        {*}",
          "        {*}",
          "        {alias_table_name}QueryResponse response = new {alias_table_name}QueryResponse();",
          "        BeanUtils.copyProperties(daoResponse, response);",
          "        return response;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {alias_table_name} daoRequest = new {alias_table_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        List<{alias_table_name}> list;",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.listWithoutBLOBs(daoRequest);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}QueryResponse> responseList = new ArrayList<>();",
          "        for({alias_table_name} item : list) {",
          "            {alias_table_name}QueryResponse newItem = new {alias_table_name}QueryResponse();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}WithBLOBs({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        List<{alias_table_name}WithBLOBs> list;",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.listWithBLOBs(daoRequest);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}QueryResponse> responseList = new ArrayList<>();",
          "        for({alias_table_name}WithBLOBs item : list) {",
          "            {alias_table_name}QueryResponse newItem = new {alias_table_name}QueryResponse();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}ByExample({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        {alias_table_name}Example example = {alias_table_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        List<{alias_table_name}> list;",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.selectByExample(example);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}QueryResponse> responseList = new ArrayList<>();",
          "        for({alias_table_name} item : list) {",
          "            {alias_table_name}QueryResponse newItem = new {alias_table_name}QueryResponse();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}ByExampleWithBLOBs({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        {alias_table_name}Example example = {alias_table_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        List<{alias_table_name}WithBLOBs> list;",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.selectByExampleWithBLOBs(example);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}QueryResponse> responseList = new ArrayList<>();",
          "        for({alias_table_name}WithBLOBs item : list) {",
          "            {alias_table_name}QueryResponse newItem = new {alias_table_name}QueryResponse();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public int count{alias_table_name}ByExample({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        {alias_table_name}Example example = {alias_table_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        Integer count;",
          "        try {",
          "            count = {alias_table_name&is_first_lower=1}Mapper.countByExample(example);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        return count;",
          "    }",
          "",
          "    {*sqls}",
          "    @Override",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        List<{alias_table_name}For{column_method_name}> list;",
          "        ",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.{column_method_name&is_first_lower=1}(daoRequest);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}{column_method_name}Response> responseList = new ArrayList<>();",
          "        for({alias_table_name}For{column_method_name} item : list) {",
          "            {alias_table_name}{column_method_name}Response newItem = new {alias_table_name}{column_method_name}Response();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        Integer count;",
          "        ",
          "       ",
          "        try {",
          "            count = {alias_table_name&is_first_lower=1}Mapper.count{column_method_name}(daoRequest);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        return count;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        List<{alias_table_name}For{column_method_name}> list;",
          "        ",
          "        {alias_table_name}ExampleFor{column_method_name} example = {alias_table_name}ExampleFor{column_method_name}.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        try {",
          "            list = {alias_table_name&is_first_lower=1}Mapper.{column_method_name&is_first_lower=1}ByExample(example);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        List<{alias_table_name}{column_method_name}Response> responseList = new ArrayList<>();",
          "        for({alias_table_name}For{column_method_name} item : list) {",
          "            {alias_table_name}{column_method_name}Response newItem = new {alias_table_name}{column_method_name}Response();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        Integer count;",
          "        ",
          "        {alias_table_name}ExampleFor{column_method_name} example = {alias_table_name}ExampleFor{column_method_name}.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        try {",
          "            count = {alias_table_name&is_first_lower=1}Mapper.count{column_method_name}ByExample(example);",
          "        } catch (Exception ex) {",
          "            throw createDatabaseFailException(ex);",
          "        }",
          "        ",
          "        return count;",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @Override",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws {config&name=exception} {",
          "        throw createFailException(\"not implement\");",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}FacadeBaseImpl",
        "package_name": "{config&name=package_facade_impl}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: FacadeCustomImpl",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends {alias_table_name}FacadeBaseImpl {",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}FacadeCustomImpl",
        "no_overwrite": 1,
        "package_name": "{config&name=package_facade_impl}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import java.util.ArrayList;",
          "import java.util.List;",
          "import java.util.Set;",
          "",
          "import {config&name=package_request}.*;",
          "import {config&name=package_response}.*;",
          "import {config&name=package_dao}.*;",
          "import org.springframework.stereotype.Service;",
          "import org.springframework.transaction.annotation.Transactional;",
          "import org.springframework.util.CollectionUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: FacadeImpl",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Service",
          "public class {file_name} extends {alias_table_name}FacadeCustomImpl implements {alias_table_name}Facade {",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int add{alias_table_name}({alias_table_name}AddRequest request) throws {config&name=exception} {",
          "        return super.add{alias_table_name}(request);",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int update{alias_table_name}({alias_table_name}UpdateRequest request) throws {config&name=exception} {",
          "        return super.update{alias_table_name}(request);",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws {config&name=exception} {",
          "        return super.delete{alias_table_name}(request);",
          "    }",
          "",
          "    @Override",
          "    public {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        {*columns&only_primary_key=1}",
          "        super.checkNonNull(request.get{column_name}(), \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "        {alias_table_name}QueryResponse result = super.query{alias_table_name}(request);",
          "        if (result == null) {",
          "            return null;",
          "        }",
          "        return result;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        return super.list{alias_table_name}(request);",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}WithBLOBs({alias_table_name}QueryRequest request) throws {config&name=exception} {",
          "        return super.list{alias_table_name}WithBLOBs(request);",
          "    }",
          "",
          "    {*sqls}",
          "    @Override",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        return super.count{column_method_name}(request);",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}ByExample({alias_table_name}{column_method_name}Request request) throws {config&name=exception} {",
          "        return super.count{column_method_name}(request);",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @Override",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws {config&name=exception} {",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}FacadeImpl",
        "package_name": "{config&name=package_facade_impl}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao}.*;",
          "import {config&name=package_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: UpdateRequestConvert",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}WithBLOBs convert({alias_table_name}UpdateRequest request) {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}UpdateRequestConvert",
        "package_name": "{config&name=package_convert}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao}.*;",
          "import {config&name=package_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: SQLRequestConvert",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}For{sql_name} convert({alias_table_name}{sql_name}Request request) {",
          "        {alias_table_name}For{sql_name} daoRequest = new {alias_table_name}For{sql_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1&include_param_columns=1}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}{sql_name}RequestConvert",
        "package_name": "{config&name=package_convert}",
        "project": "src/main/java",
        "project_name": "biz",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: DomainObject",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_blob=0}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}",
        "package_name": "{config&name=package_dao}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONArray;",
          "import com.alibaba.fastjson.JSONObject;",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.List;",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: Example",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    protected Integer limitClause;",
          "",
          "    protected Integer countClause;",
          "",
          "    protected Integer topClause;",
          "",
          "    protected String orderByClause;",
          "",
          "    protected boolean distinct;",
          "",
          "    protected List<Criteria> oredCriteria;",
          "",
          "    public {file_name}() {",
          "        oredCriteria = new ArrayList<>();",
          "    }",
          "",
          "    public void setLimitClause(Integer limitClause) {",
          "        this.limitClause = limitClause;",
          "    }",
          "",
          "    public Integer getLimitClause() {",
          "        return limitClause;",
          "    }",
          "",
          "    public void setCountClause(Integer countClause) {",
          "        this.countClause = countClause;",
          "    }",
          "",
          "    public Integer getCountClause() {",
          "        return countClause;",
          "    }",
          "",
          "    public void setTopClause(Integer topClause) {",
          "        this.topClause = topClause;",
          "    }",
          "",
          "    public Integer getTopClause() {",
          "        return topClause;",
          "    }",
          "",
          "    public void setOrderByClause(String orderByClause) {",
          "        this.orderByClause = orderByClause;",
          "    }",
          "",
          "    public String getOrderByClause() {",
          "        return orderByClause;",
          "    }",
          "",
          "    public void setDistinct(boolean distinct) {",
          "        this.distinct = distinct;",
          "    }",
          "",
          "    public boolean isDistinct() {",
          "        return distinct;",
          "    }",
          "",
          "    public List<Criteria> getOredCriteria() {",
          "        return oredCriteria;",
          "    }",
          "",
          "    public void or(Criteria criteria) {",
          "        oredCriteria.add(criteria);",
          "    }",
          "",
          "    public Criteria or() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        oredCriteria.add(criteria);",
          "        return criteria;",
          "    }",
          "",
          "    public Criteria createCriteria() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        if (oredCriteria.size() == 0) {",
          "            oredCriteria.add(criteria);",
          "        }",
          "        return criteria;",
          "    }",
          "",
          "    protected Criteria createCriteriaInternal() {",
          "        Criteria criteria = new Criteria();",
          "        return criteria;",
          "    }",
          "",
          "    public void clear() {",
          "        oredCriteria.clear();",
          "        orderByClause = null;",
          "        distinct = false;",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}WithBLOBs request) throws Exception {",
          "        return createExample(request, null);",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}WithBLOBs request, JSONObject options) throws Exception {",
          "        {file_name} example = new {file_name}();",
          "        {file_name}.Criteria criteria = example.createCriteria();",
          "        int count = 0;",
          "        ",
          "        count += setCriteriaEqualTo(request, criteria);",
          "        ",
          "        if (options != null) {",
          "            String orderBy = \"\";",
          "            if (options.containsKey(\"order_by\")) {",
          "                JSONArray jsonArray = options.getJSONArray(\"order_by\");",
          "                orderBy = setCriteriaOrderBy(jsonArray.toJavaList(CriteriaString.class), example);",
          "                if (orderBy.length() > 0) {",
          "                    example.setOrderByClause(orderBy);",
          "                }",
          "            }",
          "            if (options.containsKey(\"limit\")) {",
          "                example.setLimitClause(+options.getInteger(\"limit\"));",
          "            }",
          "            if (options.containsKey(\"count\")) {",
          "                example.setCountClause(+options.getInteger(\"count\"));",
          "            }",
          "            if (options.containsKey(\"top\")) {",
          "                example.setTopClause(+options.getInteger(\"top\"));",
          "            }",
          "            ",
          "            if(options.containsKey(\"=\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"=\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\">\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaGreaterThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">=\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\">=\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaGreaterThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!null\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"!null\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaIsNotNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"null\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"null\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaIsNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"<\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaLessThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<=\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"<=\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaLessThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"like\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"like\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!=\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"!=\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaNotEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!like\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"!like\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaNotLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"regexp\")) {",
          "                {alias_table_name}WithBLOBs obj = JSONObject.toJavaObject(options.getJSONObject(\"regexp\"), {alias_table_name}WithBLOBs.class);",
          "                count += setCriteriaRegexp(obj, criteria);",
          "            }",
          "            ",
          "        }",
          "        ",
          "        return example;",
          "    }",
          "",
          "    private static int appendCriteriaOrderByItem(StringBuilder sb, String name, String value) throws Exception {",
          "        if (value == null) {",
          "            return 0;",
          "        }",
          "        if (sb.length() > 0) {",
          "            sb.append(\",\");",
          "        }",
          "        value = value.trim();",
          "        if (\"desc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) desc\");",
          "        } else if (\"asc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) asc\");",
          "        } else if (\"desc\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" desc\");",
          "        } else if (\"asc\".equals(value) || \"\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" asc\");",
          "        } else {",
          "            throw new Exception(\"非法的order by类型:\"+value);",
          "        }",
          "        return 1;",
          "    }",
          "",
          "    private static String setCriteriaOrderBy(List<CriteriaString> request, {file_name} example) throws Exception {",
          "        StringBuilder sb = new StringBuilder();",
          "        for(CriteriaString criteriaOrderBy: request) {",
          "            int subCount = 0;",
          "",
          "            {*columns}",
          "            subCount += appendCriteriaOrderByItem(sb, \"{column_name&is_ajax=1&with_delimited=1}\", criteriaOrderBy.get{column_name}());",
          "            {*}",
          "            if (subCount > 1) {",
          "                throw new Exception(\"order by数组元素对象属性多于1个\");",
          "            }",
          "        }",
          "        if (sb.length() == 0) {",
          "            appendCriteriaOrderByItem(sb, \"1\", \"\");",
          "        }",
          "        ",
          "        return sb.toString();",
          "    }",
          "",
          "    private static int setCriteriaEqualTo({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}EqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "    ",
          "    private static int setCriteriaGreaterThan({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaGreaterThanOrEqualTo({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNotNull({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNotNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNull({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThan({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThanOrEqualTo({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLike({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Like(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotEqualTo({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotLike({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotLike(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaRegexp({alias_table_name}WithBLOBs request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Regexp(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    protected abstract static class GeneratedCriteria {",
          "        protected List<Criterion> criteria;",
          "",
          "        protected GeneratedCriteria() {",
          "            super();",
          "            criteria = new ArrayList<>();",
          "        }",
          "",
          "        public boolean isValid() {",
          "            return criteria.size() > 0;",
          "        }",
          "",
          "        public List<Criterion> getAllCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        public List<Criterion> getCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        protected void addCriterion(String condition) {",
          "            if (condition == null) {",
          "                throw new RuntimeException(\"Value for condition cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value, String property) {",
          "            if (value == null) {",
          "                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value1, Object value2, String property) {",
          "            if (value1 == null || value2 == null) {",
          "                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value1, value2));",
          "        }",
          "",
          "        {*columns}",
          "        public Criteria and{column_name}IsNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}IsNotNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is not null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}EqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} =\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <>\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Regexp({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} regexp\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Like({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}NotLike({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        public Criteria and{column_name}In(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotIn(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}Between({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotBetween({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "    }",
          "",
          "    @Getter",
          "    @Setter",
          "    public static class CriteriaString {",
          "        {*columns}",
          "        private String {column_name&is_first_lower=1};",
          "",
          "        {*}",
          "    }",
          "",
          "    public static class Criteria extends GeneratedCriteria {",
          "        protected Criteria() {",
          "            super();",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Example",
        "package_name": "{config&name=package_dao}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONArray;",
          "import com.alibaba.fastjson.JSONObject;",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.List;",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: SQLExample",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    protected Integer limitClause;",
          "",
          "    protected Integer countClause;",
          "",
          "    protected Integer topClause;",
          "",
          "    protected {alias_table_name}For{sql_name} simple;",
          "",
          "    protected String orderByClause;",
          "",
          "    protected boolean distinct;",
          "",
          "    protected List<Criteria> oredCriteria;",
          "",
          "    public {file_name}() {",
          "        oredCriteria = new ArrayList<>();",
          "        simple = new {alias_table_name}For{sql_name}();",
          "    }",
          "",
          "    public void setLimitClause(Integer limitClause) {",
          "        this.limitClause = limitClause;",
          "    }",
          "",
          "    public Integer getLimitClause() {",
          "        return limitClause;",
          "    }",
          "",
          "    public void setCountClause(Integer countClause) {",
          "        this.countClause = countClause;",
          "    }",
          "",
          "    public Integer getCountClause() {",
          "        return countClause;",
          "    }",
          "",
          "    public void setTopClause(Integer topClause) {",
          "        this.topClause = topClause;",
          "    }",
          "",
          "    public Integer getTopClause() {",
          "        return topClause;",
          "    }",
          "",
          "    public void setSimple({alias_table_name}For{sql_name} simple) {",
          "        this.simple = simple;",
          "    }",
          "",
          "    public {alias_table_name}For{sql_name} getSimple() {",
          "        return simple;",
          "    }",
          "",
          "    public void setOrderByClause(String orderByClause) {",
          "        this.orderByClause = orderByClause;",
          "    }",
          "",
          "    public String getOrderByClause() {",
          "        return orderByClause;",
          "    }",
          "",
          "    public void setDistinct(boolean distinct) {",
          "        this.distinct = distinct;",
          "    }",
          "",
          "    public boolean isDistinct() {",
          "        return distinct;",
          "    }",
          "",
          "    public List<Criteria> getOredCriteria() {",
          "        return oredCriteria;",
          "    }",
          "",
          "    public void or(Criteria criteria) {",
          "        oredCriteria.add(criteria);",
          "    }",
          "",
          "    public Criteria or() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        oredCriteria.add(criteria);",
          "        return criteria;",
          "    }",
          "",
          "    public Criteria createCriteria() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        if (oredCriteria.size() == 0) {",
          "            oredCriteria.add(criteria);",
          "        }",
          "        return criteria;",
          "    }",
          "",
          "    protected Criteria createCriteriaInternal() {",
          "        Criteria criteria = new Criteria();",
          "        return criteria;",
          "    }",
          "",
          "    public void clear() {",
          "        oredCriteria.clear();",
          "        orderByClause = null;",
          "        distinct = false;",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}For{sql_name} request) throws Exception {",
          "        return createExample(request, null);",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}For{sql_name} request, JSONObject options) throws Exception {",
          "        {file_name} example = new {file_name}();",
          "        example.setSimple(request);",
          "        {file_name}.Criteria criteria = example.createCriteria();",
          "        int count = 0;",
          "        ",
          "        if (options != null) {",
          "            String orderBy = \"\";",
          "            if (options.containsKey(\"order_by\")) {",
          "                JSONArray jsonArray = options.getJSONArray(\"order_by\");",
          "                orderBy = setCriteriaOrderBy(jsonArray.toJavaList(CriteriaString.class), example);",
          "                if (orderBy.length() > 0) {",
          "                    example.setOrderByClause(orderBy);",
          "                }",
          "            }",
          "            if (options.containsKey(\"limit\")) {",
          "                example.setLimitClause(+options.getInteger(\"limit\"));",
          "            }",
          "            if (options.containsKey(\"count\")) {",
          "                example.setCountClause(+options.getInteger(\"count\"));",
          "            }",
          "            if (options.containsKey(\"top\")) {",
          "                example.setTopClause(+options.getInteger(\"top\"));",
          "            }",
          "            ",
          "            if(options.containsKey(\"=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaGreaterThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaGreaterThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!null\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!null\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaIsNotNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"null\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"null\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaIsNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLessThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLessThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"like\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"like\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaNotEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!like\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!like\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaNotLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"regexp\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"regexp\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaRegexp(obj, criteria);",
          "            }",
          "            ",
          "        }",
          "        ",
          "        return example;",
          "    }",
          "",
          "    private static int appendCriteriaOrderByItem(StringBuilder sb, String name, String value) throws Exception {",
          "        if (value == null) {",
          "            return 0;",
          "        }",
          "        if (sb.length() > 0) {",
          "            sb.append(\",\");",
          "        }",
          "        value = value.trim();",
          "        if (\"desc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) desc\");",
          "        } else if (\"asc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) asc\");",
          "        } else if (\"desc\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" desc\");",
          "        } else if (\"asc\".equals(value) || \"\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" asc\");",
          "        } else {",
          "            throw new Exception(\"非法的order by类型:\"+value);",
          "        }",
          "        return 1;",
          "    }",
          "",
          "    private static String setCriteriaOrderBy(List<CriteriaString> request, {file_name} example) throws Exception {",
          "        StringBuilder sb = new StringBuilder();",
          "        for(CriteriaString criteriaOrderBy: request) {",
          "            int subCount = 0;",
          "",
          "            {*columns}",
          "            subCount += appendCriteriaOrderByItem(sb, \"{column_name&is_ajax=1&with_delimited=1}\", criteriaOrderBy.get{column_name}());",
          "            {*}",
          "            if (subCount > 1) {",
          "                throw new Exception(\"order by数组元素对象属性多于1个\");",
          "            }",
          "        }",
          "        if (sb.length() == 0) {",
          "            appendCriteriaOrderByItem(sb, \"1\", \"\");",
          "        }",
          "        ",
          "        return sb.toString();",
          "    }",
          "",
          "    private static int setCriteriaEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}EqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "    ",
          "    private static int setCriteriaGreaterThan({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaGreaterThanOrEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNotNull({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNotNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNull({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThan({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThanOrEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLike({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Like(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotLike({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotLike(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaRegexp({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Regexp(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    protected abstract static class GeneratedCriteria {",
          "        protected List<Criterion> criteria;",
          "",
          "        protected GeneratedCriteria() {",
          "            super();",
          "            criteria = new ArrayList<>();",
          "        }",
          "",
          "        public boolean isValid() {",
          "            return criteria.size() > 0;",
          "        }",
          "",
          "        public List<Criterion> getAllCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        public List<Criterion> getCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        protected void addCriterion(String condition) {",
          "            if (condition == null) {",
          "                throw new RuntimeException(\"Value for condition cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value, String property) {",
          "            if (value == null) {",
          "                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value1, Object value2, String property) {",
          "            if (value1 == null || value2 == null) {",
          "                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value1, value2));",
          "        }",
          "",
          "        {*columns}",
          "        public Criteria and{column_name}IsNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}IsNotNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is not null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}EqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} =\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <>\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Regexp({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} regexp\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Like({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}NotLike({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        public Criteria and{column_name}In(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotIn(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}Between({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotBetween({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "    }",
          "",
          "    @Getter",
          "    @Setter",
          "    public static class CriteriaString {",
          "        {*columns}",
          "        private String {column_name&is_first_lower=1};",
          "",
          "        {*}",
          "    }",
          "",
          "    public static class Criteria extends GeneratedCriteria {",
          "        protected Criteria() {",
          "            super();",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}ExampleFor{sql_name}",
        "package_name": "{config&name=package_dao}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1&include_param_columns=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: SQLDomainObject",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&include_param_columns=1}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}",
        "package_name": "{config&name=package_dao}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao}.*;",
          "import java.util.Date;",
          "import java.util.List;",
          "import org.apache.ibatis.annotations.Param;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: Repository",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public interface {file_name} {",
          "    {*primary_key}",
          "    int deleteByPrimaryKey({column_param_for_repository});",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    int deleteBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {*}",
          "    int deleteByExample({alias_table_name}Example example);",
          "    ",
          "    int insert({alias_table_name} record);",
          "    ",
          "    int insertWithBLOBs({alias_table_name}WithBLOBs record);",
          "",
          "    int insertSelective({alias_table_name}WithBLOBs record);",
          "    ",
          "    List<{alias_table_name}WithBLOBs> selectByExampleWithBLOBs({alias_table_name}Example example);",
          "",
          "    List<{alias_table_name}> selectByExample({alias_table_name}Example example);",
          "",
          "    int countByExample({alias_table_name}Example example);",
          "    ",
          "    List<{alias_table_name}> listWithoutBLOBs({alias_table_name} record);",
          "",
          "    List<{alias_table_name}WithBLOBs> listWithBLOBs({alias_table_name} record);",
          "    ",
          "    {*primary_key}",
          "    {alias_table_name} selectByPrimaryKey({column_param_for_repository});",
          "",
          "    {alias_table_name}WithBLOBs selectByPrimaryKeyWithBLOBs({column_param_for_repository});",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    {alias_table_name} selectBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {alias_table_name}WithBLOBs selectBy{column_name_for_repository}WithBLOBs({column_param_for_repository});",
          "",
          "    {*}",
          "    int updateByExampleSelective(@Param(\"record\") {alias_table_name}WithBLOBs record, @Param(\"example\") {alias_table_name}Example example);",
          "    ",
          "    {*table&has_primary_key=1}",
          "    int updateByPrimaryKeySelective({alias_table_name}WithBLOBs record);",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    int updateBy{column_name_for_repository}Selective({alias_table_name}WithBLOBs record);",
          "",
          "    {*}",
          "    {*table&has_primary_key=1}",
          "    int updateByPrimaryKeyWithBLOBs({alias_table_name}WithBLOBs record);",
          "",
          "    int updateByPrimaryKey({alias_table_name} record);",
          "",
          "    {*}",
          "    {*sqls}",
          "    List<{alias_table_name}For{column_method_name}> {column_method_name&is_first_lower=1}BySimple({alias_table_name}For{column_method_name} record);",
          "",
          "    int count{column_method_name}BySimple({alias_table_name}For{column_method_name} record);",
          "",
          "    List<{alias_table_name}For{column_method_name}> {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name} record);",
          "",
          "    int count{column_method_name}({alias_table_name}For{column_method_name} record);",
          "",
          "    List<{alias_table_name}For{column_method_name}> {column_method_name&is_first_lower=1}ByExample({alias_table_name}ExampleFor{column_method_name} example);",
          "",
          "    int count{column_method_name}ByExample({alias_table_name}ExampleFor{column_method_name} example);",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Mapper",
        "package_name": "{config&name=package_mapper}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">",
          "<mapper namespace=\"{config&name=package_mapper}.{alias_table_name}Mapper\">",
          "  <sql id=\"Example_Where_Clause\">",
          "    <where>",
          "      <foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\">",
          "        <if test=\"criteria.valid\">",
          "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">",
          "            <foreach collection=\"criteria.criteria\" item=\"criterion\">",
          "              <choose>",
          "                <when test=\"criterion.noValue\">",
          "                  and ${criterion.condition}",
          "                </when>",
          "                <when test=\"criterion.singleValue\">",
          "                  and ${criterion.condition} #{criterion.value}",
          "                </when>",
          "                <when test=\"criterion.betweenValue\">",
          "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}",
          "                </when>",
          "                <when test=\"criterion.listValue\">",
          "                  and ${criterion.condition}",
          "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">",
          "                    #{listItem}",
          "                  </foreach>",
          "                </when>",
          "              </choose>",
          "            </foreach>",
          "          </trim>",
          "        </if>",
          "      </foreach>",
          "    </where>",
          "  </sql>",
          "  <sql id=\"Update_By_Example_Where_Clause\">",
          "    <where>",
          "      <foreach collection=\"example.oredCriteria\" item=\"criteria\" separator=\"or\">",
          "        <if test=\"criteria.valid\">",
          "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">",
          "            <foreach collection=\"criteria.criteria\" item=\"criterion\">",
          "              <choose>",
          "                <when test=\"criterion.noValue\">",
          "                  and ${criterion.condition}",
          "                </when>",
          "                <when test=\"criterion.singleValue\">",
          "                  and ${criterion.condition} #{criterion.value}",
          "                </when>",
          "                <when test=\"criterion.betweenValue\">",
          "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}",
          "                </when>",
          "                <when test=\"criterion.listValue\">",
          "                  and ${criterion.condition}",
          "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">",
          "                    #{listItem}",
          "                  </foreach>",
          "                </when>",
          "              </choose>",
          "            </foreach>",
          "          </trim>",
          "        </if>",
          "      </foreach>",
          "    </where>",
          "  </sql>",
          "  <sql id=\"Base_Column_List\">",
          "    {*columns&is_blob=0}",
          "    {column_name&is_ajax=1&with_delimited=1}{value&value=,&column_is_last=0}",
          "    {*}",
          "  </sql>",
          "  {*table&has_blobs=1}",
          "  <sql id=\"Blob_Column_List\">",
          "    {*columns&is_blob=1}",
          "    {column_name&is_ajax=1&with_delimited=1}{value&value=,&column_is_last=0}",
          "    {*}",
          "  </sql>",
          "  {*}",
          "  <select id=\"selectByExampleWithBLOBs\" parameterType=\"{config&name=package_dao}.{alias_table_name}Example\" resultType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "    'false' as QUERYID,",
          "    t.*",
          "    from {alias_table_name&is_ajax=1} t",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "  <select id=\"selectByExample\" parameterType=\"{config&name=package_dao}.{alias_table_name}Example\" resultType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "    'false' as QUERYID,",
          "    <include refid=\"Base_Column_List\" />",
          "    from {alias_table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "  <select id=\"countByExample\" parameterType=\"{config&name=package_dao}.{alias_table_name}Example\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from {alias_table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </select>",
          "  <select id=\"listWithoutBLOBs\" parameterType=\"{config&name=package_dao}.{alias_table_name}\" resultType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {alias_table_name&is_ajax=1}",
          "    where 88=88",
          "    {*columns&is_blob=0}",
          "    <if test=\"{column_name&is_first_lower=1} != null\">",
          "    and {column_name&is_ajax=1} = #{{column_name&is_first_lower=1}}",
          "    </if>",
          "    {*}",
          "  </select>",
          "  <select id=\"listWithBLOBs\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\" resultType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    t.*",
          "    from {alias_table_name&is_ajax=1} t",
          "    where 88=88",
          "    {*columns&is_blob=1}",
          "    <if test=\"{column_name&is_first_lower=1} != null\">",
          "    and {column_name&is_ajax=1} = #{{column_name&is_first_lower=1}}",
          "    </if>",
          "    {*}",
          "  </select>",
          "  {*primary_key}",
          "  <select id=\"selectByPrimaryKey\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {alias_table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectByPrimaryKeyWithBLOBs\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    *",
          "    from {alias_table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  {*}",
          "  {*unique_keys}",
          "  <select id=\"selectBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {alias_table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectBy{column_name_for_repository}WithBLOBs\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    *",
          "    from {alias_table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  {*}",
          "  {*primary_key}",
          "  <delete id=\"deleteByPrimaryKey\" parameterType=\"{column_parameter_type_for_mapper}\">",
          "    delete from {alias_table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </delete>",
          "  {*}",
          "  {*unique_keys}",
          "  <delete id=\"deleteBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\">",
          "    delete from {alias_table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </delete>",
          "  {*}",
          "  <delete id=\"deleteByExample\" parameterType=\"{config&name=package_dao}.{alias_table_name}Example\">",
          "    delete from {alias_table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </delete>",
          "  <insert id=\"insert\" parameterType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    insert into {alias_table_name&is_ajax=1}",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns&is_blob=0}",
          "    {column_name&is_ajax=1&with_delimited=1},",
          "    {*}",
          "    </trim>",
          "    values",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns&is_blob=0}",
          "    #{{column_name&is_first_lower=1}},",
          "    {*}",
          "    </trim>",
          "  </insert>",
          "  <insert id=\"insertWithBLOBs\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    insert into {alias_table_name&is_ajax=1}",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns}",
          "    {column_name&is_ajax=1&with_delimited=1},",
          "    {*}",
          "    </trim>",
          "    values",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns}",
          "    #{{column_name&is_first_lower=1}},",
          "    {*}",
          "    </trim>",
          "  </insert>",
          "  <insert id=\"insertSelective\" keyProperty=\"id\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\" useGeneratedKeys=\"true\">",
          "    insert into {alias_table_name&is_ajax=1}",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "      {*columns}",
          "      <if test=\"{column_name&is_first_lower=1} != null\">",
          "        {column_name&is_ajax=1&with_delimited=1},",
          "      </if>",
          "      {*}",
          "    </trim>",
          "    <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">",
          "      {*columns}",
          "      <if test=\"{column_name&is_first_lower=1} != null\">",
          "        #{{column_name&is_first_lower=1}},",
          "      </if>",
          "      {*}",
          "    </trim>",
          "  </insert>",
          "  <update id=\"updateByExampleSelective\" parameterType=\"map\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0}",
          "      <if test=\"record.{column_name&is_first_lower=1} != null\">",
          "        {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      </if>",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  <update id=\"updateByExampleWithBLOBs\" parameterType=\"map\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns}",
          "      {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  <update id=\"updateByExample\" parameterType=\"map\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0}",
          "      {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  <update id=\"updateByPrimaryKeySelective\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_primary_key=0}",
          "        <if test=\"{column_name&is_first_lower=1} != null\">",
          "          {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "        </if>",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*unique_keys}",
          "  <update id=\"updateBy{column_name_for_repository}Selective\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns}",
          "        <if test=\"{column_name&is_first_lower=1} != null\">",
          "          {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "        </if>",
          "      {*}",
          "    </set>",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*}",
          "  <update id=\"updateByPrimaryKeyWithBLOBs\" parameterType=\"{config&name=package_dao}.{alias_table_name}WithBLOBs\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_primary_key=0}",
          "\t    {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  <update id=\"updateByPrimaryKey\" parameterType=\"{config&name=package_dao}.{alias_table_name}\">",
          "    update {alias_table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0&is_primary_key=0}",
          "\t\t{column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*sqls}",
          "  <!--",
          "  {column_ori_sql}",
          "  -->",
          "",
          "  <select id=\"{column_method_name&is_first_lower=1}BySimple\" parameterType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\" resultType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\">",
          "<![CDATA[",
          "    {column_simple_sql_with_star}",
          "]]>",
          "  </select>",
          "  <select id=\"count{column_method_name}BySimple\" parameterType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from (",
          "<![CDATA[",
          "    {column_simple_sql_with_star}",
          "]]>",
          "    ) t",
          "  </select>",
          "",
          "  <select id=\"{column_method_name&is_first_lower=1}\" parameterType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\" resultType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\">",
          "<![CDATA[",
          "    {column_simple_sql}",
          "]]>",
          "  </select>",
          "  <select id=\"count{column_method_name}\" parameterType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from (",
          "<![CDATA[",
          "    {column_simple_sql}",
          "]]>",
          "    ) t",
          "  </select>",
          "",
          "  <select id=\"{column_method_name&is_first_lower=1}ByExample\" parameterType=\"{config&name=package_dao}.{alias_table_name}ExampleFor{column_method_name}\" resultType=\"{config&name=package_dao}.{alias_table_name}For{column_method_name}\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "\t  *",
          "    from (",
          "<![CDATA[",
          "    {column_sql}",
          "]]>",
          "    ) t",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "",
          "  <select id=\"count{column_method_name}ByExample\" parameterType=\"{config&name=package_dao}.{alias_table_name}ExampleFor{column_method_name}\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from (",
          "<![CDATA[",
          "    {column_sql}",
          "]]>",
          "    ) t",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </select>",
          "  {*}",
          "</mapper>"
        ],
        "file_type": "xml",
        "id": null,
        "name": "{alias_table_name}Mapper",
        "package_name": "mapper",
        "project": "src/main/resources",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1&is_blob=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: DomainObjectWithBLOBs",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends {alias_table_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_blob=1}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}WithBLOBs",
        "package_name": "{config&name=package_dao}",
        "project": "src/main/java",
        "project_name": "dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_request}.*;",
          "import {config&name=package_response}.*;",
          "import {config&name=package_facade}.*;",
          "",
          "import org.springframework.beans.factory.annotation.Autowired;",
          "import java.util.List;",
          "import javax.servlet.http.HttpServletRequest;",
          "import javax.servlet.http.HttpServletResponse;",
          " ",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: WebBaseController",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends BaseController {",
          "    @Autowired",
          "    {alias_table_name}Facade facade;",
          "",
          "    public int add{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}AddRequest request) throws Exception {",
          "        return facade.add{alias_table_name}(request);",
          "    }",
          "",
          "    public int update{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}UpdateRequest request) throws Exception {",
          "        return facade.update{alias_table_name}(request);",
          "    }",
          "",
          "    public int batchUpdate{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}BatchUpdateRequest request) throws Exception {",
          "        return facade.batchUpdate{alias_table_name}(request);",
          "    }",
          "",
          "    public int delete{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}DeleteRequest request) throws Exception {",
          "        return facade.delete{alias_table_name}(request);",
          "    }",
          "",
          "    public {alias_table_name}QueryResponse query{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}QueryRequest request) throws Exception {",
          "        return facade.query{alias_table_name}(request);",
          "    }",
          "",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}QueryRequest request) throws Exception {",
          "        return facade.list{alias_table_name}ByExampleWithBLOBs(request);",
          "    }",
          "",
          "    public int count{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}QueryRequest request) throws Exception {",
          "        return facade.count{alias_table_name}ByExample(request);",
          "    }",
          "",
          "    {*sqls}",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}{column_method_name}Request request) throws Exception {",
          "        return facade.{column_method_name&is_first_lower=1}ByExample(request);",
          "    }",
          "",
          "    public int count{column_method_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {alias_table_name}{column_method_name}Request request) throws Exception {",
          "        return facade.count{column_method_name}ByExample(request);",
          "    }",
          "",
          "    {*}",
          "    {*methods&is_import_excel=0}",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, {column_java_type} request) throws Exception {",
          "        return facade.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}WebBaseController",
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "web",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_request}.*;",
          "import {config&name=package_response}.*;",
          "import java.util.List;",
          "import javax.servlet.http.HttpServletRequest;",
          "import javax.servlet.http.HttpServletResponse;",
          "import org.springframework.web.bind.annotation.*;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: WebController",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@RestController",
          "@RequestMapping(value = \"/{alias_table_name&is_ajax=1}\")",
          "public class {file_name} extends {alias_table_name}WebCustomController {",
          "    @PostMapping(\"/add\")",
          "    public int add{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}AddRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.add{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/update\")",
          "    public int update{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}UpdateRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.update{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/batch_update\")",
          "    public int batchUpdate{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}BatchUpdateRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.batchUpdate{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/delete\")",
          "    public int delete{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}DeleteRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.delete{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/query\")",
          "    public {alias_table_name}QueryResponse query{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.query{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/list\")",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.list{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/count\")",
          "    public int count{alias_table_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        fixRequest(request);",
          "        return super.count{alias_table_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    {*sqls}",
          "    @PostMapping(\"/{column_method_name&is_ajax=1}\")",
          "    public List<{alias_table_name}{column_method_name}Response> {column_method_name&is_first_lower=1}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}{column_method_name}Request request) throws Exception {",
          "        fixRequest(request);",
          "        return super.{column_method_name&is_first_lower=1}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    @PostMapping(\"/count_{column_method_name&is_ajax=1}\")",
          "    public int count{column_method_name}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {alias_table_name}{column_method_name}Request request) throws Exception {",
          "        fixRequest(request);",
          "        return super.count{column_method_name}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @ResponseBody",
          "    @PostMapping(\"/{column_method_name&is_ajax=1}\")",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestBody {column_java_type} request) throws Exception {",
          "        fixRequest(request);",
          "        return super.{column_method_name&is_first_lower=1}(httpServletRequest, httpServletResponse, request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}WebController",
        "no_overwrite": 0,
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "web",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: WebCustomController",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends {alias_table_name}WebBaseController {",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}WebCustomController",
        "no_overwrite": 1,
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "web",
        "workspace_name": null
      }
    ],
    "sdp_sql": [
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "int",
        "java_type": "BaseRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clear",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 1,
        "table_name": "sdp_history",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameIdRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clone",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_project",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "execute",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_project",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "Map<String, String>",
        "name": "property_map",
        "parameter_catalog": "api.response",
        "parameter_catalog_type": "query",
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_project",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameIdRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clone",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_sql",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "Integer",
        "name": "disable_auto_param",
        "parameter_catalog": "api.request",
        "parameter_catalog_type": "add",
        "parameter_is_like": 0,
        "parameter_mode": "append",
        "parameter_nullable": 1,
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "parameter_sql_value_ignore": 0,
        "parameter_without_test": 0,
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_sql",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "String",
        "name": "alias_table_name",
        "parameter_catalog": "api.response",
        "parameter_catalog_type": "query",
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_template",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "SdpProjectQueryResponse",
        "name": "dyn_project",
        "parameter_catalog": "api.response",
        "parameter_catalog_type": "query",
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_template",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "SdpWorkspaceQueryResponse",
        "name": "dyn_workspace",
        "parameter_catalog": "api.response",
        "parameter_catalog_type": "query",
        "parameter_mode": "append",
        "parameter_nullable": 0,
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_template",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "Map<String, Object>",
        "name": "extra_info_map",
        "parameter_catalog": "api.response",
        "parameter_catalog_type": "query",
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_template",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameIdRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clone",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameIdRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clone_workspace",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "String",
        "java_type": "BaseNameRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "fix_json_object",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "String",
        "java_type": "SdpWorkspaceUpdateRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "test_connect",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "is_interface": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "",
        "name": "",
        "parameter_catalog": "sql",
        "parameter_catalog_type": "get_db_config",
        "parameter_mode": "append",
        "parameter_sql": [
          "select '' as host, 0 as port, '' as db, '' as user"
        ],
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "is_interface": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "",
        "name": "",
        "parameter_catalog": "sql",
        "parameter_catalog_type": "get_table_list",
        "parameter_mode": "append",
        "parameter_sql": [
          "select '' as workspace_name, '' as name"
        ],
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "SdpWorkspaceConfigAddRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "batch_update_value",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace_config",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "Integer",
        "java_type": "BaseNameIdRequest",
        "name": "request",
        "parameter_catalog": "api.facade",
        "parameter_catalog_type": "clone",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace_config",
        "workspace_name": null
      },
      {
        "id": null,
        "is_disable": 0,
        "java_imports": "",
        "java_return_type": "",
        "java_type": "String",
        "name": "new_value",
        "parameter_catalog": "api.request",
        "parameter_catalog_type": "add",
        "parameter_is_export_excel": 0,
        "parameter_is_import_excel": 0,
        "parameter_mode": "append",
        "parameter_nullable": 1,
        "parameter_sql_issimple": 0,
        "parameter_sql_return_nolist": 0,
        "parameter_sql_value": "",
        "remarks": "",
        "sort_no": 0,
        "table_name": "sdp_workspace_config",
        "workspace_name": null
      }
    ]
  }
}