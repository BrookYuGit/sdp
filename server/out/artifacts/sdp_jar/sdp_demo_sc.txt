{
  "demo_sc": {
    "sdp_workspace": [
      {
        "db_classname": "com.mysql.cj.jdbc.Driver",
        "db_database": "sc",
        "db_host": "localhost",
        "db_password": "******",
        "db_port": 3306,
        "db_username": "root",
        "id": null,
        "name": null,
        "remark": "选课系统"
      }
    ],
    "sdp_workspace_config": [
      {
        "id": null,
        "name": "author",
        "remark": "",
        "value": "SDP",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "exception",
        "value": "Exception",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_class_extends_request",
        "value": "extends BaseRequest",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_import_exception",
        "value": "",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "java_import_extends_request",
        "value": "",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_application",
        "value": "org.example",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_config",
        "value": "org.example.config",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_controller",
        "value": "org.example.controller",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_controller_custom",
        "value": "org.example.controller.custom",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dao_domain",
        "value": "org.example.dao.domain",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dao_mapper",
        "value": "org.example.dao.mapper",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dto_convert",
        "value": "org.example.dto.convert",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dto_request",
        "value": "org.example.dto.request",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_dto_response",
        "value": "org.example.dto.response",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_service",
        "value": "org.example.service",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_service_custom",
        "value": "org.example.service.custom",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "package_service_impl",
        "value": "org.example.service.impl",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "pom_artifact_id",
        "value": "sc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "pom_group_id",
        "value": "cn.example",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "pom_version",
        "value": "1.0-SNAPSHOT",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "port_server",
        "value": "8080",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "version",
        "value": "1.0",
        "workspace_name": null
      }
    ],
    "sdp_project": [
      {
        "id": null,
        "name": "server_api",
        "remark": "",
        "root_path": "D:\\git\\sc\\server",
        "tables": "sc_dept, sc_student,sc_course,sc_teacher, sc, tc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "server_controller",
        "remark": "",
        "root_path": "D:\\git\\sc\\server",
        "tables": "sc_dept, sc_student,sc_course,sc_teacher, sc, tc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "server_dao",
        "remark": "",
        "root_path": "D:\\git\\sc\\server",
        "tables": "sc_dept, sc_student,sc_course,sc_teacher, sc, tc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "server_service",
        "remark": "",
        "root_path": "D:\\git\\sc\\server",
        "tables": "sc_dept, sc_student,sc_course,sc_teacher, sc, tc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "server_static",
        "remark": "",
        "root_path": "D:\\git\\sc\\server",
        "tables": "sc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "web_page",
        "remark": "",
        "root_path": "D:\\git\\sc\\web",
        "tables": "sc_dept, sc_student,sc_course,sc_teacher, sc, tc",
        "workspace_name": null
      },
      {
        "id": null,
        "name": "web_static",
        "remark": "",
        "root_path": "D:\\git\\sc\\web",
        "tables": "sc",
        "workspace_name": null
      }
    ],
    "sdp_template": [
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_auto_increment=0&extra_request_columns=add}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "        {*columns&extra_request_columns=add&is_only_request_columns=1&param_is_nullable=0}",
          "        super.assertNotNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}AddRequest",
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "remark": "",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&extra_request_columns=update}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    {*columns&only_primary_key=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}_list\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}_list\")",
          "    private List<{column_java_type}> {column_name&is_first_lower=1}List;",
          "",
          "    {*}",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "        {*columns&only_primary_key=1}",
          "        super.assertNotNull({column_name&is_first_lower=1}List, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}BatchUpdateRequest",
        "no_overwrite": 0,
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&only_primary_key=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private List<{column_java_type}> {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "        {*columns&only_primary_key=1}",
          "        super.assertNotNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}DeleteRequest",
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "{*columns&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "{*columns&has_java_field_type_with_package=1&include_param_columns=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&include_param_columns=1}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "        {*columns&is_only_param_columns=1&param_is_nullable=0}",
          "        super.assertNotNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    ",
          "        {*columns&is_only_param_columns=1&param_is_like=1}",
          "        if(null != {column_name&is_first_lower=1}) {",
          "            {column_name&is_first_lower=1} = \"%\" + {column_name&is_first_lower=1} + \"%\";",
          "        }",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}Request",
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.io.Serializable;",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "{*columns&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseResponse implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}Response",
        "package_name": "{config&name=package_dto_response}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}QueryRequest",
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.io.Serializable;",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseResponse implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}QueryResponse",
        "package_name": "{config&name=package_dto_response}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dto_request}.*;",
          "import {config&name=package_dto_response}.*;",
          "import java.util.List;",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public interface {file_name} {",
          "    int add{alias_table_name}({alias_table_name}AddRequest request) throws Exception;",
          "",
          "    int update{alias_table_name}({alias_table_name}UpdateRequest request) throws Exception;",
          "",
          "    int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws Exception;",
          "",
          "    {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws Exception;",
          "",
          "    List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws Exception;",
          "",
          "    int count{alias_table_name}({alias_table_name}QueryRequest request) throws Exception;",
          "",
          "    {*sqls&is_interface=0}",
          "    List<{alias_table_name}For{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception;",
          "",
          "    int count{column_method_name}({alias_table_name}For{column_method_name}Request request) throws Exception;",
          "     ",
          "    {*}",
          "    {*sqls&is_interface=1}",
          "    {alias_table_name}For{column_method_name}Response {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception;",
          "",
          "    {*}",
          "    {*methods}",
          "    {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws Exception;",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Service",
        "no_overwrite": 0,
        "package_name": "{config&name=package_service}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.annotation.JSONField;",
          "import com.fasterxml.jackson.annotation.JsonFormat;",
          "import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "import java.util.List;",
          "import java.util.Map;",
          "",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends BaseRequest {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&extra_request_columns=update}",
          "    @JsonProperty(\"{column_name&is_ajax=1}\")",
          "    {column_jsonformat_for_date}",
          "    @JSONField({column_jsonfield_for_date}name = \"{column_name&is_ajax=1}\")",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "    @Override",
          "    public void checkParam() throws Exception {",
          "        {*columns&only_primary_key=1}",
          "        super.assertNotNull({column_name&is_first_lower=1}, \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}UpdateRequest",
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_api",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_controller_custom}.*;",
          "import {config&name=package_dto_request}.*;",
          "import {config&name=package_dto_response}.*;",
          "import java.util.List;",
          "import org.springframework.web.bind.annotation.*;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@RestController",
          "@RequestMapping(value = \"/{alias_table_name&is_ajax=1}\")",
          "public class {file_name} extends {alias_table_name}CustomController {",
          "    @PostMapping(\"/add\")",
          "    public int add{alias_table_name}(@RequestBody {alias_table_name}AddRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"add\", request);",
          "        return super.add{alias_table_name}(request);",
          "    }",
          "",
          "    @PostMapping(\"/update\")",
          "    public int update{alias_table_name}(@RequestBody {alias_table_name}UpdateRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"update\", request);",
          "        return super.update{alias_table_name}(request);",
          "    }",
          "",
          "    @PostMapping(\"/delete\")",
          "    public int delete{alias_table_name}(@RequestBody {alias_table_name}DeleteRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"delete\", request);",
          "        return super.delete{alias_table_name}(request);",
          "    }",
          "",
          "    @PostMapping(\"/query\")",
          "    public {alias_table_name}QueryResponse query{alias_table_name}(@RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"query\", request);",
          "        return super.query{alias_table_name}(request);",
          "    }",
          "",
          "    @PostMapping(\"/list\")",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}(@RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"list\", request);",
          "        return super.list{alias_table_name}(request);",
          "    }",
          "",
          "    @PostMapping(\"/count\")",
          "    public int count{alias_table_name}(@RequestBody {alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"count\", request);",
          "        return super.count{alias_table_name}(request);",
          "    }",
          "",
          "    {*sqls&is_interface=0}",
          "    @PostMapping(\"/{column_method_name&is_ajax=1}\")",
          "    public List<{alias_table_name}For{column_method_name}Response> {column_method_name&is_first_lower=1}(@RequestBody {alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_ajax=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    @PostMapping(\"/count_{column_method_name&is_ajax=1}\")",
          "    public int count{column_method_name}(@RequestBody {alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"count_{column_method_name&is_ajax=1}\", request);",
          "        return super.count{column_method_name}(request);",
          "    }",
          "",
          "    {*}",
          "    {*sqls&is_interface=1}",
          "    @PostMapping(\"/{column_method_name&is_ajax=1}\")",
          "    public {alias_table_name}For{column_method_name}Response {column_method_name&is_first_lower=1}(@RequestBody {alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_ajax=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @PostMapping(\"/{column_method_name&is_ajax=1}\")",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}(@RequestBody {column_java_type} request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_ajax=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Controller",
        "no_overwrite": 0,
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "server_controller",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_controller}.*;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends {alias_table_name}SuperController {",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}CustomController",
        "no_overwrite": 1,
        "package_name": "{config&name=package_controller_custom}",
        "project": "src/main/java",
        "project_name": "server_controller",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_dto_request}.*;",
          "import {config&name=package_dto_response}.*;",
          "import {config&name=package_service}.*;",
          "import org.springframework.beans.factory.annotation.Autowired;",
          "import java.util.Date;",
          "import java.util.List;",
          " ",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends BaseController {",
          "    @Autowired",
          "    {alias_table_name}Service service;",
          "",
          "    public int add{alias_table_name}({alias_table_name}AddRequest request) throws Exception {",
          "        return service.add{alias_table_name}(request);",
          "    }",
          "",
          "    public int update{alias_table_name}({alias_table_name}UpdateRequest request) throws Exception {",
          "        return service.update{alias_table_name}(request);",
          "    }",
          "",
          "    public int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws Exception {",
          "        return service.delete{alias_table_name}(request);",
          "    }",
          "",
          "    public {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        return service.query{alias_table_name}(request);",
          "    }",
          "",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        return service.list{alias_table_name}(request);",
          "    }",
          "",
          "    public int count{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        return service.count{alias_table_name}(request);",
          "    }",
          "",
          "    {*sqls&is_interface=0}",
          "    public List<{alias_table_name}For{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        return service.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    public int count{column_method_name}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        return service.count{column_method_name}(request);",
          "    }",
          "    ",
          "    {*}",
          "    {*sqls&is_interface=1}",
          "    public {alias_table_name}For{column_method_name}Response {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        return service.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws Exception {",
          "        return service.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}SuperController",
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "server_controller",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_blob=0&include_response_columns=0}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}",
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONArray;",
          "import com.alibaba.fastjson.JSONObject;",
          "{*columns&has_java_field_type_with_package=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.List;",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    protected Integer limitClause;",
          "",
          "    protected Integer countClause;",
          "",
          "    protected Integer topClause;",
          "",
          "    protected String orderByClause;",
          "",
          "    protected boolean distinct;",
          "",
          "    protected List<Criteria> oredCriteria;",
          "",
          "    public {file_name}() {",
          "        oredCriteria = new ArrayList<>();",
          "    }",
          "",
          "    public void setLimitClause(Integer limitClause) {",
          "        this.limitClause = limitClause;",
          "    }",
          "",
          "    public Integer getLimitClause() {",
          "        return limitClause;",
          "    }",
          "",
          "    public void setCountClause(Integer countClause) {",
          "        this.countClause = countClause;",
          "    }",
          "",
          "    public Integer getCountClause() {",
          "        return countClause;",
          "    }",
          "",
          "    public void setTopClause(Integer topClause) {",
          "        this.topClause = topClause;",
          "    }",
          "",
          "    public Integer getTopClause() {",
          "        return topClause;",
          "    }",
          "",
          "    public void setOrderByClause(String orderByClause) {",
          "        this.orderByClause = orderByClause;",
          "    }",
          "",
          "    public String getOrderByClause() {",
          "        return orderByClause;",
          "    }",
          "",
          "    public void setDistinct(boolean distinct) {",
          "        this.distinct = distinct;",
          "    }",
          "",
          "    public boolean isDistinct() {",
          "        return distinct;",
          "    }",
          "",
          "    public List<Criteria> getOredCriteria() {",
          "        return oredCriteria;",
          "    }",
          "",
          "    public void or(Criteria criteria) {",
          "        oredCriteria.add(criteria);",
          "    }",
          "",
          "    public Criteria or() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        oredCriteria.add(criteria);",
          "        return criteria;",
          "    }",
          "",
          "    public Criteria createCriteria() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        if (oredCriteria.size() == 0) {",
          "            oredCriteria.add(criteria);",
          "        }",
          "        return criteria;",
          "    }",
          "",
          "    protected Criteria createCriteriaInternal() {",
          "        Criteria criteria = new Criteria();",
          "        return criteria;",
          "    }",
          "",
          "    public void clear() {",
          "        oredCriteria.clear();",
          "        orderByClause = null;",
          "        distinct = false;",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name} request) throws Exception {",
          "        return createExample(request, null);",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name} request, JSONObject options) throws Exception {",
          "        {file_name} example = new {file_name}();",
          "        {file_name}.Criteria criteria = example.createCriteria();",
          "        int count = 0;",
          "        ",
          "        count += setCriteriaEqualTo(request, criteria);",
          "        ",
          "        if (options != null) {",
          "            String orderBy = \"\";",
          "            if (options.containsKey(\"order_by\")) {",
          "                JSONArray jsonArray = options.getJSONArray(\"order_by\");",
          "                orderBy = setCriteriaOrderBy(Criterion.toList(jsonArray, CriteriaString.class), example);",
          "                if (orderBy.length() > 0) {",
          "                    example.setOrderByClause(orderBy);",
          "                }",
          "            }",
          "            if (options.containsKey(\"limit\")) {",
          "                example.setLimitClause(+options.getInteger(\"limit\"));",
          "            }",
          "            if (options.containsKey(\"count\")) {",
          "                example.setCountClause(+options.getInteger(\"count\"));",
          "            }",
          "            if (options.containsKey(\"top\")) {",
          "                example.setTopClause(+options.getInteger(\"top\"));",
          "            }",
          "            ",
          "            if(options.containsKey(\"=\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"=\"), {alias_table_name}.class);",
          "                count += setCriteriaEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">\"), {alias_table_name}.class);",
          "                count += setCriteriaGreaterThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">=\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">=\"), {alias_table_name}.class);",
          "                count += setCriteriaGreaterThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!null\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!null\"), {alias_table_name}.class);",
          "                count += setCriteriaIsNotNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"null\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"null\"), {alias_table_name}.class);",
          "                count += setCriteriaIsNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<\"), {alias_table_name}.class);",
          "                count += setCriteriaLessThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<=\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<=\"), {alias_table_name}.class);",
          "                count += setCriteriaLessThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"like\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"like\"), {alias_table_name}.class);",
          "                count += setCriteriaLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!=\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!=\"), {alias_table_name}.class);",
          "                count += setCriteriaNotEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!like\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!like\"), {alias_table_name}.class);",
          "                count += setCriteriaNotLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"regexp\")) {",
          "                {alias_table_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"regexp\"), {alias_table_name}.class);",
          "                count += setCriteriaRegexp(obj, criteria);",
          "            }",
          "            ",
          "        }",
          "        ",
          "        return example;",
          "    }",
          "",
          "    private static int appendCriteriaOrderByItem(StringBuilder sb, String name, String value) throws Exception {",
          "        if (value == null) {",
          "            return 0;",
          "        }",
          "        if (sb.length() > 0) {",
          "            sb.append(\",\");",
          "        }",
          "        value = value.trim();",
          "        if (\"desc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) desc\");",
          "        } else if (\"asc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) asc\");",
          "        } else if (\"desc\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" desc\");",
          "        } else if (\"asc\".equals(value) || \"\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" asc\");",
          "        } else {",
          "            throw new Exception(\"非法的order by类型:\"+value);",
          "        }",
          "        return 1;",
          "    }",
          "",
          "    private static String setCriteriaOrderBy(List<Object> request, {file_name} example) throws Exception {",
          "        StringBuilder sb = new StringBuilder();",
          "        for(Object criteriaOrderByObj: request) {",
          "            CriteriaString criteriaOrderBy = (CriteriaString)criteriaOrderByObj;",
          "            int subCount = 0;",
          "",
          "            {*columns}",
          "            subCount += appendCriteriaOrderByItem(sb, \"{column_name&is_ajax=1&with_delimited=1}\", criteriaOrderBy.get{column_name}());",
          "            {*}",
          "            if (subCount > 1) {",
          "                throw new Exception(\"order by数组元素对象属性多于1个\");",
          "            }",
          "        }",
          "        if (sb.length() == 0) {",
          "            appendCriteriaOrderByItem(sb, \"1\", \"\");",
          "        }",
          "        ",
          "        return sb.toString();",
          "    }",
          "",
          "    private static int setCriteriaEqualTo({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}EqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "    ",
          "    private static int setCriteriaGreaterThan({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaGreaterThanOrEqualTo({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNotNull({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNotNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNull({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThan({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThanOrEqualTo({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLike({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Like(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotEqualTo({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotLike({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotLike(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaRegexp({alias_table_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&is_blob=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Regexp(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    protected abstract static class GeneratedCriteria {",
          "        protected List<Criterion> criteria;",
          "",
          "        protected GeneratedCriteria() {",
          "            super();",
          "            criteria = new ArrayList<>();",
          "        }",
          "",
          "        public boolean isValid() {",
          "            return criteria.size() > 0;",
          "        }",
          "",
          "        public List<Criterion> getAllCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        public List<Criterion> getCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        protected void addCriterion(String condition) {",
          "            if (condition == null) {",
          "                throw new RuntimeException(\"Value for condition cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value, String property) {",
          "            if (value == null) {",
          "                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value1, Object value2, String property) {",
          "            if (value1 == null || value2 == null) {",
          "                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value1, value2));",
          "        }",
          "",
          "        {*columns&is_blob=0}",
          "        public Criteria and{column_name}IsNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}IsNotNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is not null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}EqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} =\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <>\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Regexp({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} regexp\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}Like({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1}",
          "        public Criteria and{column_name}NotLike({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        public Criteria and{column_name}In(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotIn(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}Between({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotBetween({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "    }",
          "",
          "    @Getter",
          "    @Setter",
          "    public static class CriteriaString {",
          "        {*columns}",
          "        private String {column_name&is_first_lower=1};",
          "",
          "        {*}",
          "    }",
          "",
          "    public static class Criteria extends GeneratedCriteria {",
          "        protected Criteria() {",
          "            super();",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Example",
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1&include_param_columns=1&include_response_columns=0}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&include_param_columns=1&include_response_columns=0}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}",
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONArray;",
          "import com.alibaba.fastjson.JSONObject;",
          "{*columns&has_java_field_type_with_package=1&include_response_columns=0}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.List;",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    protected Integer limitClause;",
          "",
          "    protected Integer countClause;",
          "",
          "    protected Integer topClause;",
          "",
          "    protected {alias_table_name}For{sql_name} simple;",
          "",
          "    protected String orderByClause;",
          "",
          "    protected boolean distinct;",
          "",
          "    protected List<Criteria> oredCriteria;",
          "",
          "    public {file_name}() {",
          "        oredCriteria = new ArrayList<>();",
          "        simple = new {alias_table_name}For{sql_name}();",
          "    }",
          "",
          "    public void setLimitClause(Integer limitClause) {",
          "        this.limitClause = limitClause;",
          "    }",
          "",
          "    public Integer getLimitClause() {",
          "        return limitClause;",
          "    }",
          "",
          "    public void setCountClause(Integer countClause) {",
          "        this.countClause = countClause;",
          "    }",
          "",
          "    public Integer getCountClause() {",
          "        return countClause;",
          "    }",
          "",
          "    public void setTopClause(Integer topClause) {",
          "        this.topClause = topClause;",
          "    }",
          "",
          "    public Integer getTopClause() {",
          "        return topClause;",
          "    }",
          "",
          "    public void setSimple({alias_table_name}For{sql_name} simple) {",
          "        this.simple = simple;",
          "    }",
          "",
          "    public {alias_table_name}For{sql_name} getSimple() {",
          "        return simple;",
          "    }",
          "",
          "    public void setOrderByClause(String orderByClause) {",
          "        this.orderByClause = orderByClause;",
          "    }",
          "",
          "    public String getOrderByClause() {",
          "        return orderByClause;",
          "    }",
          "",
          "    public void setDistinct(boolean distinct) {",
          "        this.distinct = distinct;",
          "    }",
          "",
          "    public boolean isDistinct() {",
          "        return distinct;",
          "    }",
          "",
          "    public List<Criteria> getOredCriteria() {",
          "        return oredCriteria;",
          "    }",
          "",
          "    public void or(Criteria criteria) {",
          "        oredCriteria.add(criteria);",
          "    }",
          "",
          "    public Criteria or() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        oredCriteria.add(criteria);",
          "        return criteria;",
          "    }",
          "",
          "    public Criteria createCriteria() {",
          "        Criteria criteria = createCriteriaInternal();",
          "        if (oredCriteria.size() == 0) {",
          "            oredCriteria.add(criteria);",
          "        }",
          "        return criteria;",
          "    }",
          "",
          "    protected Criteria createCriteriaInternal() {",
          "        Criteria criteria = new Criteria();",
          "        return criteria;",
          "    }",
          "",
          "    public void clear() {",
          "        oredCriteria.clear();",
          "        orderByClause = null;",
          "        distinct = false;",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}For{sql_name} request) throws Exception {",
          "        return createExample(request, null);",
          "    }",
          "",
          "    public static {file_name} createExample({alias_table_name}For{sql_name} request, JSONObject options) throws Exception {",
          "        {file_name} example = new {file_name}();",
          "        example.setSimple(request);",
          "        {file_name}.Criteria criteria = example.createCriteria();",
          "        int count = 0;",
          "        ",
          "        if (options != null) {",
          "            String orderBy = \"\";",
          "            if (options.containsKey(\"order_by\")) {",
          "                JSONArray jsonArray = options.getJSONArray(\"order_by\");",
          "                orderBy = setCriteriaOrderBy(Criterion.toList(jsonArray, CriteriaString.class), example);",
          "                if (orderBy.length() > 0) {",
          "                    example.setOrderByClause(orderBy);",
          "                }",
          "            }",
          "            if (options.containsKey(\"limit\")) {",
          "                example.setLimitClause(+options.getInteger(\"limit\"));",
          "            }",
          "            if (options.containsKey(\"count\")) {",
          "                example.setCountClause(+options.getInteger(\"count\"));",
          "            }",
          "            if (options.containsKey(\"top\")) {",
          "                example.setTopClause(+options.getInteger(\"top\"));",
          "            }",
          "            ",
          "            if(options.containsKey(\"=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaGreaterThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\">=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\">=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaGreaterThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!null\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!null\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaIsNotNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"null\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"null\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaIsNull(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLessThan(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"<=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"<=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLessThanOrEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"like\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"like\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!=\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!=\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaNotEqualTo(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"!like\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"!like\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaNotLike(obj, criteria);",
          "            }",
          "            if(options.containsKey(\"regexp\")) {",
          "                {alias_table_name}For{sql_name} obj = JSONObject.toJavaObject(options.getJSONObject(\"regexp\"), {alias_table_name}For{sql_name}.class);",
          "                count += setCriteriaRegexp(obj, criteria);",
          "            }",
          "            ",
          "        }",
          "        ",
          "        return example;",
          "    }",
          "",
          "    private static int appendCriteriaOrderByItem(StringBuilder sb, String name, String value) throws Exception {",
          "        if (value == null) {",
          "            return 0;",
          "        }",
          "        if (sb.length() > 0) {",
          "            sb.append(\",\");",
          "        }",
          "        value = value.trim();",
          "        if (\"desc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) desc\");",
          "        } else if (\"asc/gbk\".equals(value)) {",
          "            sb.append(\"convert(\");",
          "            sb.append(name);",
          "            sb.append(\" using gbk) asc\");",
          "        } else if (\"desc\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" desc\");",
          "        } else if (\"asc\".equals(value) || \"\".equals(value)) {",
          "            sb.append(name);",
          "            sb.append(\" asc\");",
          "        } else {",
          "            throw new Exception(\"非法的order by类型:\"+value);",
          "        }",
          "        return 1;",
          "    }",
          "",
          "    private static String setCriteriaOrderBy(List<Object> request, {file_name} example) throws Exception {",
          "        StringBuilder sb = new StringBuilder();",
          "        for(Object criteriaOrderByObj: request) {",
          "            CriteriaString criteriaOrderBy = (CriteriaString)criteriaOrderByObj;",
          "            int subCount = 0;",
          "",
          "            {*columns&include_response_columns=0}",
          "            subCount += appendCriteriaOrderByItem(sb, \"{column_name&is_ajax=1&with_delimited=1}\", criteriaOrderBy.get{column_name}());",
          "            {*}",
          "            if (subCount > 1) {",
          "                throw new Exception(\"order by数组元素对象属性多于1个\");",
          "            }",
          "        }",
          "        if (sb.length() == 0) {",
          "            appendCriteriaOrderByItem(sb, \"1\", \"\");",
          "        }",
          "        ",
          "        return sb.toString();",
          "    }",
          "",
          "    private static int setCriteriaEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}EqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "    ",
          "    private static int setCriteriaGreaterThan({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaGreaterThanOrEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}GreaterThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNotNull({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNotNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaIsNull({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}IsNull();",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThan({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThan(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLessThanOrEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}LessThanOrEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaLike({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Like(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotEqualTo({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotEqualTo(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaNotLike({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}NotLike(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    private static int setCriteriaRegexp({alias_table_name}For{sql_name} request, Criteria criteria) {",
          "        int count = 0;",
          "",
          "        {*columns&is_string=1&include_response_columns=0}",
          "        if (request.get{column_name}() != null) {",
          "            count++;",
          "            criteria.and{column_name}Regexp(request.get{column_name}());",
          "        }",
          "",
          "        {*}",
          "        return count;",
          "    }",
          "",
          "    protected abstract static class GeneratedCriteria {",
          "        protected List<Criterion> criteria;",
          "",
          "        protected GeneratedCriteria() {",
          "            super();",
          "            criteria = new ArrayList<>();",
          "        }",
          "",
          "        public boolean isValid() {",
          "            return criteria.size() > 0;",
          "        }",
          "",
          "        public List<Criterion> getAllCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        public List<Criterion> getCriteria() {",
          "            return criteria;",
          "        }",
          "",
          "        protected void addCriterion(String condition) {",
          "            if (condition == null) {",
          "                throw new RuntimeException(\"Value for condition cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value, String property) {",
          "            if (value == null) {",
          "                throw new RuntimeException(\"Value for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value));",
          "        }",
          "",
          "        protected void addCriterion(String condition, Object value1, Object value2, String property) {",
          "            if (value1 == null || value2 == null) {",
          "                throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");",
          "            }",
          "            criteria.add(new Criterion(condition, value1, value2));",
          "        }",
          "",
          "        {*columns&include_response_columns=0}",
          "        public Criteria and{column_name}IsNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}IsNotNull() {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} is not null\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}EqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} =\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <>\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}GreaterThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} >=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThan({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}LessThanOrEqualTo({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} <=\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*column&is_string=1&include_response_columns=0}",
          "        public Criteria and{column_name}Regexp({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} regexp\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1&include_response_columns=0}",
          "        public Criteria and{column_name}Like({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        {*column&is_string=1&include_response_columns=0}",
          "        public Criteria and{column_name}NotLike({column_java_type} value) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not like\", value, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "        public Criteria and{column_name}In(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotIn(List<{column_java_type}> values) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not in\", values, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}Between({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        public Criteria and{column_name}NotBetween({column_java_type} value1, {column_java_type} value2) {",
          "            addCriterion(\"{column_name&is_ajax=1&with_delimited=1} not between\", value1, value2, \"{column_name&is_first_lower=1}\");",
          "            return (Criteria) this;",
          "        }",
          "",
          "        {*}",
          "    }",
          "",
          "    @Getter",
          "    @Setter",
          "    public static class CriteriaString {",
          "        {*columns&include_response_columns=0}",
          "        private String {column_name&is_first_lower=1};",
          "",
          "        {*}",
          "    }",
          "",
          "    public static class Criteria extends GeneratedCriteria {",
          "        protected Criteria() {",
          "            super();",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}Example",
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao_domain}.*;",
          "import java.util.Date;",
          "import java.util.List;",
          "import org.apache.ibatis.annotations.Param;",
          "",
          "/**",
          " * InterfaceName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public interface {file_name} {",
          "    {*primary_key}",
          "    int deleteByPrimaryKey({column_param_for_repository});",
          "",
          "    int deleteBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    int deleteBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {*}",
          "    int deleteByExample({alias_table_name}Example example);",
          "    ",
          "    int insert({alias_table_name}WithBLOBs record);",
          "    ",
          "    int insertSelective({alias_table_name}WithBLOBs record);",
          "    ",
          "    List<{alias_table_name}WithBLOBs> selectByExampleWithBLOBs({alias_table_name}Example example);",
          "",
          "    List<{alias_table_name}> selectByExample({alias_table_name}Example example);",
          "    ",
          "    int countByExample({alias_table_name}Example example);",
          "    ",
          "    {*primary_key}",
          "    {alias_table_name} selectByPrimaryKey({column_param_for_repository});",
          "",
          "    {alias_table_name}WithBLOBs selectByPrimaryKeyWithBLOBs({column_param_for_repository});",
          "",
          "    {alias_table_name} selectBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {alias_table_name}WithBLOBs selectBy{column_name_for_repository}WithBLOBs({column_param_for_repository});",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    {alias_table_name} selectBy{column_name_for_repository}({column_param_for_repository});",
          "",
          "    {alias_table_name}WithBLOBs selectBy{column_name_for_repository}WithBLOBs({column_param_for_repository});",
          "",
          "    {*}",
          "    int updateByExampleSelective(@Param(\"record\") {alias_table_name}WithBLOBs record, @Param(\"example\") {alias_table_name}Example example);",
          "    ",
          "    {*primary_key}",
          "    int updateByPrimaryKeySelective({alias_table_name}WithBLOBs record);",
          "",
          "    int updateBy{column_name_for_repository}Selective({alias_table_name}WithBLOBs record);",
          "",
          "    {*}",
          "    {*unique_keys}",
          "    int updateBy{column_name_for_repository}Selective({alias_table_name}WithBLOBs record);",
          "",
          "    {*}",
          "    {*primary_key}",
          "    int updateByPrimaryKeyWithBLOBs({alias_table_name}WithBLOBs record);",
          "",
          "    int updateByPrimaryKey({alias_table_name} record);",
          "",
          "    int updateBy{column_name_for_repository}({alias_table_name} record);",
          "",
          "    int updateBy{column_name_for_repository}WithBLOBs({alias_table_name}WithBLOBs record);",
          "",
          "    {*}",
          "    {*sqls}",
          "    List<{alias_table_name}For{column_method_name}> {column_method_name&is_first_lower=1}ByExample({alias_table_name}For{column_method_name}Example example);",
          "",
          "    int count{column_method_name}ByExample({alias_table_name}For{column_method_name}Example example);",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}Mapper",
        "no_overwrite": 0,
        "package_name": "{config&name=package_dao_mapper}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">",
          "<mapper namespace=\"{config&name=package_dao_mapper}.{alias_table_name}Mapper\">",
          "  <sql id=\"Example_Where_Clause\">",
          "    <where>",
          "      <foreach collection=\"oredCriteria\" item=\"criteria\" separator=\"or\">",
          "        <if test=\"criteria.valid\">",
          "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">",
          "            <foreach collection=\"criteria.criteria\" item=\"criterion\">",
          "              <choose>",
          "                <when test=\"criterion.noValue\">",
          "                  and ${criterion.condition}",
          "                </when>",
          "                <when test=\"criterion.singleValue\">",
          "                  and ${criterion.condition} #{criterion.value}",
          "                </when>",
          "                <when test=\"criterion.betweenValue\">",
          "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}",
          "                </when>",
          "                <when test=\"criterion.listValue\">",
          "                  and ${criterion.condition}",
          "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">",
          "                    #{listItem}",
          "                  </foreach>",
          "                </when>",
          "              </choose>",
          "            </foreach>",
          "          </trim>",
          "        </if>",
          "      </foreach>",
          "    </where>",
          "  </sql>",
          "  <sql id=\"Update_By_Example_Where_Clause\">",
          "    <where>",
          "      <foreach collection=\"example.oredCriteria\" item=\"criteria\" separator=\"or\">",
          "        <if test=\"criteria.valid\">",
          "          <trim prefix=\"(\" prefixOverrides=\"and\" suffix=\")\">",
          "            <foreach collection=\"criteria.criteria\" item=\"criterion\">",
          "              <choose>",
          "                <when test=\"criterion.noValue\">",
          "                  and ${criterion.condition}",
          "                </when>",
          "                <when test=\"criterion.singleValue\">",
          "                  and ${criterion.condition} #{criterion.value}",
          "                </when>",
          "                <when test=\"criterion.betweenValue\">",
          "                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}",
          "                </when>",
          "                <when test=\"criterion.listValue\">",
          "                  and ${criterion.condition}",
          "                  <foreach close=\")\" collection=\"criterion.value\" item=\"listItem\" open=\"(\" separator=\",\">",
          "                    #{listItem}",
          "                  </foreach>",
          "                </when>",
          "              </choose>",
          "            </foreach>",
          "          </trim>",
          "        </if>",
          "      </foreach>",
          "    </where>",
          "  </sql>",
          "  <sql id=\"Base_Column_List\">",
          "    {*columns&is_blob=0&include_response_columns=0}",
          "    {column_name&is_ajax=1&with_delimited=1}{value&value=,&column_is_last=0}",
          "    {*}",
          "  </sql>",
          "  {*table&has_blobs=1}",
          "  <sql id=\"Blob_Column_List\">",
          "    {*columns&is_blob=1&include_response_columns=0}",
          "    {column_name&is_ajax=1&with_delimited=1}{value&value=,&column_is_last=0}",
          "    {*}",
          "  </sql>",
          "  {*}",
          "  <select id=\"selectByExampleWithBLOBs\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}Example\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "    'false' as QUERYID,",
          "    <include refid=\"Base_Column_List\" />",
          "    {*table&has_blobs=1}",
          "    ,",
          "    <include refid=\"Blob_Column_List\" />",
          "    {*}",
          "    from {table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "  <select id=\"selectByExample\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}Example\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "    'false' as QUERYID,",
          "    <include refid=\"Base_Column_List\" />",
          "    from {table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "  <select id=\"countByExample\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}Example\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from {table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </select>",
          "  {*primary_key}",
          "  <select id=\"selectByPrimaryKey\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectByPrimaryKeyWithBLOBs\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    {*table&has_blobs=1}",
          "    ,",
          "    <include refid=\"Blob_Column_List\" />",
          "    {*}",
          "    from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectBy{column_name_for_repository}WithBLOBs\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    {*table&has_blobs=1}",
          "    ,",
          "    <include refid=\"Blob_Column_List\" />",
          "    {*}",
          "    from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  {*}",
          "  {*unique_keys}",
          "  <select id=\"selectBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    from {table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  <select id=\"selectBy{column_name_for_repository}WithBLOBs\" parameterType=\"{column_parameter_type_for_mapper}\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    select",
          "    <include refid=\"Base_Column_List\" />",
          "    {*table&has_blobs=1}",
          "    ,",
          "    <include refid=\"Blob_Column_List\" />",
          "    {*}",
          "    from {table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </select>",
          "  {*}",
          "  {*primary_key}",
          "  <delete id=\"deleteByPrimaryKey\" parameterType=\"{column_parameter_type_for_mapper}\">",
          "    delete from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </delete>",
          "  <delete id=\"deleteBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\">",
          "    delete from {table_name&is_ajax=1}",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </delete>",
          "  {*}",
          "  {*unique_keys}",
          "  <delete id=\"deleteBy{column_name_for_repository}\" parameterType=\"{column_parameter_type_for_mapper}\">",
          "    delete from {table_name&is_ajax=1}",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </delete>",
          "  {*}",
          "  <delete id=\"deleteByExample\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}Example\">",
          "    delete from {table_name&is_ajax=1}",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </delete>",
          "  <insert id=\"insert\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    insert into {table_name&is_ajax=1}",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns&include_response_columns=0&include_response_columns=0}",
          "    {column_name&is_ajax=1&with_delimited=1},",
          "    {*}",
          "    </trim>",
          "    values",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "    {*columns&include_response_columns=0&include_response_columns=0}",
          "    #{{column_name&is_first_lower=1}},",
          "    {*}",
          "    </trim>",
          "  </insert>",
          "  <insert id=\"insertSelective\" keyProperty=\"id\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\" useGeneratedKeys=\"true\">",
          "    insert into {table_name&is_ajax=1}",
          "    <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">",
          "      {*columns&include_response_columns=0}",
          "      <if test=\"{column_name&is_first_lower=1} != null\">",
          "        {column_name&is_ajax=1&with_delimited=1},",
          "      </if>",
          "      {*}",
          "    </trim>",
          "    <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">",
          "      {*columns&include_response_columns=0}",
          "      <if test=\"{column_name&is_first_lower=1} != null\">",
          "        #{{column_name&is_first_lower=1}},",
          "      </if>",
          "      {*}",
          "    </trim>",
          "  </insert>",
          "  <update id=\"updateByExampleSelective\" parameterType=\"map\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0&include_response_columns=0}",
          "      <if test=\"record.{column_name&is_first_lower=1} != null\">",
          "        {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      </if>",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  <update id=\"updateByExampleWithBLOBs\" parameterType=\"map\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&include_response_columns=0}",
          "      {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  <update id=\"updateByExample\" parameterType=\"map\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0&include_response_columns=0}",
          "      {column_name&is_ajax=1&with_delimited=1} = #{record.{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Update_By_Example_Where_Clause\" />",
          "    </if>",
          "  </update>",
          "  {*primary_key}",
          "  <update id=\"updateByPrimaryKeySelective\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_primary_key=0}",
          "        <if test=\"{column_name&is_first_lower=1} != null\">",
          "          {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "        </if>",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  <update id=\"updateBy{column_name_for_repository}Selective\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&include_response_columns=0}",
          "        <if test=\"{column_name&is_first_lower=1} != null\">",
          "          {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "        </if>",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1&include_response_columns=0}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*}",
          "  {*unique_keys}",
          "  <update id=\"updateBy{column_name_for_repository}Selective\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns}",
          "        <if test=\"{column_name&is_first_lower=1} != null\">",
          "          {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "        </if>",
          "      {*}",
          "    </set>",
          "    {*unique_key_fields}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*}",
          "  {*primary_key}",
          "  <update id=\"updateByPrimaryKeyWithBLOBs\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_primary_key=0}",
          "        {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  <update id=\"updateByPrimaryKey\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0&is_primary_key=0&include_response_columns=0}",
          "        {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1&include_response_columns=0}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  <update id=\"updateBy{column_name_for_repository}\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_blob=0&is_primary_key=0&include_response_columns=0}",
          "        {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  <update id=\"updateBy{column_name_for_repository}WithBLOBs\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}WithBLOBs\">",
          "    update {table_name&is_ajax=1}",
          "    <set>",
          "      {*columns&is_primary_key=0&include_response_columns=0}",
          "        {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}},",
          "      {*}",
          "    </set>",
          "    {*columns&only_primary_key=1}",
          "    {value&value=where&column_is_first=1}{value&value=and&column_is_first=0} {column_name&is_ajax=1&with_delimited=1} = #{{column_name&is_first_lower=1}}",
          "    {*}",
          "  </update>",
          "  {*}",
          "  {*sqls}",
          "  <select id=\"{column_method_name&is_first_lower=1}ByExample\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}For{column_method_name}Example\" resultType=\"{config&name=package_dao_domain}.{alias_table_name}For{column_method_name}\">",
          "    select",
          "    <if test=\"topClause != null\">",
          "      top ${topClause}",
          "    </if>",
          "    <if test=\"distinct\">",
          "      distinct",
          "    </if>",
          "    {*column&is_simple=1&include_response_columns=0}",
          "      *",
          "    {*}",
          "    {*column&is_simple=0&include_response_columns=0}",
          "      {*columns&include_response_columns=0}",
          "      {column_name&is_ajax=1&with_delimited=1}{value&value=,&column_is_last=0}",
          "      {*}",
          "    {*}",
          "    from (",
          "<![CDATA[",
          "    {column_sql}",
          "]]>",
          "    ) t",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "    <if test=\"orderByClause != null\">",
          "      order by ${orderByClause}",
          "    </if>",
          "    <if test=\"limitClause != null\">",
          "      limit ${limitClause}",
          "    </if>",
          "    <if test=\"limitClause != null and countClause != null\">",
          "      , ${countClause}",
          "    </if>",
          "  </select>",
          "  <select id=\"count{column_method_name}ByExample\" parameterType=\"{config&name=package_dao_domain}.{alias_table_name}For{column_method_name}Example\" resultType=\"Integer\">",
          "    select",
          "    count(*)",
          "    from (",
          "<![CDATA[",
          "    {column_sql}",
          "]]>",
          "    ) t",
          "    <if test=\"_parameter != null\">",
          "      <include refid=\"Example_Where_Clause\" />",
          "    </if>",
          "  </select>",
          "  {*}",
          "</mapper>"
        ],
        "file_type": "xml",
        "id": null,
        "name": "{alias_table_name}Mapper",
        "no_overwrite": 0,
        "package_name": "mapper",
        "project": "src/main/resources",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import java.io.Serializable;",
          "{*columns&has_java_field_type_with_package=1&is_blob=1}",
          "import {column_java_type&is_full_name=1};",
          "{*}",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Getter",
          "@Setter",
          "public class {file_name} extends {alias_table_name} implements Serializable {",
          "    private static final long serialVersionUID = {serialVersionUID}L;",
          "",
          "    {*columns&is_blob=1}",
          "    private {column_java_type} {column_name&is_first_lower=1};",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}WithBLOBs",
        "no_overwrite": 0,
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_dao",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao_domain}.*;",
          "import {config&name=package_dto_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}WithBLOBs convert({alias_table_name}AddRequest request) {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}AddRequestConvert",
        "package_name": "{config&name=package_dto_convert}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao_domain}.*;",
          "import {config&name=package_dto_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: SQLRequestConvert",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}For{sql_name} convert({alias_table_name}For{sql_name}Request request) {",
          "        {alias_table_name}For{sql_name} daoRequest = new {alias_table_name}For{sql_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1&include_param_columns=1&include_response_columns=0}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}For{sql_name}RequestConvert",
        "no_overwrite": 0,
        "package_name": "{config&name=package_dto_convert}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_service_impl}.*;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends {alias_table_name}ServiceSuperImpl {",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}ServiceCustomImpl",
        "no_overwrite": 1,
        "package_name": "{config&name=package_service_custom}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import java.util.ArrayList;",
          "import java.util.List;",
          "import java.util.Set;",
          "",
          "import {config&name=package_service}.*;",
          "import {config&name=package_service_custom}.*;",
          "import {config&name=package_dto_request}.*;",
          "import {config&name=package_dto_response}.*;",
          "import {config&name=package_dao_domain}.*;",
          "import org.springframework.stereotype.Service;",
          "import org.springframework.transaction.annotation.Transactional;",
          "import org.springframework.util.CollectionUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "@Service",
          "public class {file_name} extends {alias_table_name}ServiceCustomImpl implements {alias_table_name}Service {",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int add{alias_table_name}({alias_table_name}AddRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"add\", request);",
          "        return super.add{alias_table_name}(request);",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int update{alias_table_name}({alias_table_name}UpdateRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"update\", request);",
          "        return super.update{alias_table_name}(request);",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"delete\", request);",
          "        return super.delete{alias_table_name}(request);",
          "    }",
          "",
          "    @Override",
          "    public {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"query\", request);",
          "        {*columns&only_primary_key=1}",
          "        super.assertNotNull(request.get{column_name}(), \"{column_comment&is_first_line=1}\");",
          "        {*}",
          "        {alias_table_name}QueryResponse result = super.query{alias_table_name}(request);",
          "        if (result == null) {",
          "            return null;",
          "        }",
          "        return result;",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"list\", request);",
          "        return super.list{alias_table_name}(request);",
          "    }",
          "",
          "    @Override",
          "    public int count{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"count\", request);",
          "        return super.count{alias_table_name}(request);",
          "    }",
          "    ",
          "    {*sqls&is_interface=0}",
          "    @Override",
          "    public List<{alias_table_name}For{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_first_lower=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"count_{column_method_name&is_first_lower=1}\", request);",
          "        return super.count{column_method_name}(request);",
          "    }",
          "",
          "    {*}",
          "    {*sqls&is_interface=1}",
          "    @Override",
          "    public {alias_table_name}For{column_method_name}Response {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_first_lower=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @Override",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws Exception {",
          "        super.fixRequest(\"{alias_table_name&is_ajax=1}\", \"{column_method_name&is_first_lower=1}\", request);",
          "        return super.{column_method_name&is_first_lower=1}(request);",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}ServiceImpl",
        "package_name": "{config&name=package_service_impl}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          " ",
          "{*methods&has_column_java_imports=1}",
          "{column_java_imports}",
          "{*}",
          "",
          "import {config&name=package_service}.*;",
          "import {config&name=package_dao_domain}.*;",
          "import {config&name=package_dao_mapper}.*;",
          "import {config&name=package_dto_convert}.*;",
          "import {config&name=package_dto_request}.*;",
          "import {config&name=package_dto_response}.*;",
          "import java.util.ArrayList;",
          "import java.util.Date;",
          "import java.util.HashMap;",
          "import java.util.List;",
          "import java.util.Map;",
          "import org.springframework.beans.BeanUtils;",
          "import org.springframework.beans.factory.annotation.Autowired;",
          "import org.springframework.transaction.annotation.Transactional;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: ",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} extends BaseServiceImpl implements {alias_table_name}Service {",
          "    @Autowired",
          "    protected {alias_table_name}Mapper {alias_table_name&is_first_lower=1}Mapper;",
          "",
          "    public static Map<String, String> uniqueFieldMap = initUniqueFieldMap();",
          "",
          "    public static Map initUniqueFieldMap() {",
          "        HashMap map = new HashMap<>();",
          "        {*unique_keys}",
          "        map.put(\"{column_name&is_ajax=1}\", \"{column_comment}\");",
          "        {*}",
          "        return map;",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int add{alias_table_name}({alias_table_name}AddRequest request) throws Exception {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}AddRequestConvert().convert(request);",
          "        int result = {alias_table_name&is_first_lower=1}Mapper.insertSelective(daoRequest);",
          "            {*columns&is_auto_increment=1}",
          "        if (result > 0) {",
          "                return daoRequest.get{column_name}();",
          "        }",
          "            {*}",
          "        return result;",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int update{alias_table_name}({alias_table_name}UpdateRequest request) throws Exception {",
          "        {*table&has_primary_key=0}",
          "        throw createFailException(\"not implement\");",
          "        {*}",
          "        {*table&has_primary_key=1}",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}UpdateRequestConvert().convert(request);",
          "        int result = {alias_table_name&is_first_lower=1}Mapper.updateByPrimaryKeySelective(daoRequest);",
          "        return result;",
          "        {*}",
          "    }",
          "",
          "    @Transactional(rollbackFor = Exception.class)",
          "    @Override",
          "    public int delete{alias_table_name}({alias_table_name}DeleteRequest request) throws Exception {",
          "        {*table&has_primary_key=0}",
          "        throw createFailException(\"not implement\");",
          "        {*}",
          "        {*table&has_primary_key=1}",
          "          {*table&is_primary_key_multiple=1}",
          "            {*columns&is_primary_key=1&column_is_first=1}",
          "        int rowCount = request.get{column_name}().size();",
          "            {*}",
          "            {*columns&is_primary_key=1&column_is_first=0}",
          "        if (rowCount != request.get{column_name}().size()) {",
          "            throw new Exception(\"数组元素数量不一致\");",
          "        }",
          "            {*}",
          "          {*}",
          "        BaseRequest abstractRequest = new BaseRequest();",
          "        BeanUtils.copyProperties(request, abstractRequest);",
          "",
          "          {*table&is_primary_key_multiple=1}",
          "            {*columns&is_primary_key=1&column_is_first=1}",
          "        for(int row = 0; row < rowCount; row++) {",
          "            {alias_table_name&is_first_lower=1}Mapper.deleteByPrimaryKey(",
          "                {*columns&is_primary_key=1}",
          "                request.get{column_name}().get(row){value&value=,&column_is_last=0}",
          "                {*}",
          "            );",
          "        }",
          "        return rowCount;",
          "            {*}",
          "          {*}",
          "          {*table&is_primary_key_multiple=0}",
          "        {alias_table_name}Example example = new {alias_table_name}Example();",
          "            {*columns&is_primary_key=1}",
          "        example.createCriteria().and{column_name}In(request.get{column_name}());",
          "            {*}",
          "        return {alias_table_name&is_first_lower=1}Mapper.deleteByExample(example);",
          "          {*}",
          "        {*}",
          "    }",
          "",
          "    @Override",
          "    public {alias_table_name}QueryResponse query{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        {*table&has_primary_key=0}",
          "        throw createFailException(\"not implement\");",
          "        {*}",
          "        {*table&has_primary_key=1}",
          "          {*table&is_primary_key_multiple=1}",
          "        {alias_table_name}WithBLOBs daoResponse = {alias_table_name&is_first_lower=1}Mapper.selectByPrimaryKeyWithBLOBs(",
          "            {*columns&is_primary_key=1}",
          "            request.get{column_name}(){value&value=,&column_is_last=0}",
          "            {*}",
          "        );",
          "          {*}",
          "          {*table&is_primary_key_multiple=0}",
          "            {*columns&is_primary_key=1}",
          "        {alias_table_name}WithBLOBs daoResponse = {alias_table_name&is_first_lower=1}Mapper.selectByPrimaryKeyWithBLOBs(request.get{column_name}());",
          "            {*}",
          "          {*}",
          "        {alias_table_name}QueryResponse response = new {alias_table_name}QueryResponse();",
          "        BeanUtils.copyProperties(daoResponse, response);",
          "        return response;",
          "        {*}",
          "    }",
          "",
          "    @Override",
          "    public List<{alias_table_name}QueryResponse> list{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        {alias_table_name}Example example = {alias_table_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        List<{alias_table_name}WithBLOBs> list = {alias_table_name&is_first_lower=1}Mapper.selectByExampleWithBLOBs(example);",
          "        ",
          "        List<{alias_table_name}QueryResponse> responseList = new ArrayList<>();",
          "        for({alias_table_name}WithBLOBs item : list) {",
          "            {alias_table_name}QueryResponse newItem = new {alias_table_name}QueryResponse();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public int count{alias_table_name}({alias_table_name}QueryRequest request) throws Exception {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        {alias_table_name}Example example = {alias_table_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        return {alias_table_name&is_first_lower=1}Mapper.countByExample(example);",
          "    }",
          "    ",
          "    {*sqls&is_interface=0}",
          "    @Override",
          "    public List<{alias_table_name}For{column_method_name}Response> {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {alias_table_name}For{column_method_name}Example example = {alias_table_name}For{column_method_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        List<{alias_table_name}For{column_method_name}> list = {alias_table_name&is_first_lower=1}Mapper.{column_method_name&is_first_lower=1}ByExample(example);",
          "        ",
          "        List<{alias_table_name}For{column_method_name}Response> responseList = new ArrayList<>();",
          "        for({alias_table_name}For{column_method_name} item : list) {",
          "            {alias_table_name}For{column_method_name}Response newItem = new {alias_table_name}For{column_method_name}Response();",
          "            BeanUtils.copyProperties(item, newItem);",
          "            responseList.add(newItem);",
          "        }",
          "        ",
          "        return responseList;",
          "    }",
          "",
          "    @Override",
          "    public int count{column_method_name}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        {alias_table_name}For{column_method_name} daoRequest = new {alias_table_name}For{column_method_name}();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {alias_table_name}For{column_method_name}Example example = {alias_table_name}For{column_method_name}Example.createExample(daoRequest, request.getQueryOptions());",
          "        ",
          "        return {alias_table_name&is_first_lower=1}Mapper.count{column_method_name}ByExample(example);",
          "    }",
          "    ",
          "    {*}",
          "    {*sqls&is_interface=1}",
          "    @Override",
          "    public {alias_table_name}For{column_method_name}Response {column_method_name&is_first_lower=1}({alias_table_name}For{column_method_name}Request request) throws Exception {",
          "        throw createFailException(\"not implement\");",
          "    }",
          "",
          "    {*}",
          "    {*methods}",
          "    @Override",
          "    public {column_java_return_type} {column_method_name&is_first_lower=1}({column_java_type} request) throws Exception {",
          "        throw createFailException(\"not implement\");",
          "    }",
          "",
          "    {*}",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}ServiceSuperImpl",
        "package_name": "{config&name=package_service_impl}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dao_domain}.*;",
          "import {config&name=package_dto_request}.*;",
          "import java.util.Date;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "/**",
          " * @ClassName: {file_name}",
          " * @Description: UpdateRequestConvert",
          " * @Author: {config&name=author}",
          " * @Date: {file_date}",
          " * @Version: {config&name=version}",
          " * Table: {table_name&is_ajax=1}",
          " * Comment:",
          " * {table_comment&is_first_line=0}",
          " */",
          "public class {file_name} {",
          "    public static {alias_table_name}WithBLOBs convert({alias_table_name}UpdateRequest request) {",
          "        {alias_table_name}WithBLOBs daoRequest = new {alias_table_name}WithBLOBs();",
          "        BeanUtils.copyProperties(request, daoRequest);",
          "        ",
          "        {*columns&is_string=1}",
          "        daoRequest.set{column_name}(daoRequest.get{column_name}() == null ? null : daoRequest.get{column_name}().trim());",
          "        {*}",
          "        ",
          "        return daoRequest;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "{alias_table_name}UpdateRequestConvert",
        "package_name": "{config&name=package_dto_convert}",
        "project": "src/main/java",
        "project_name": "server_service",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "*.iml",
          "*.pid",
          ".idea",
          "target"
        ],
        "file_type": "gitignore",
        "id": null,
        "name": "",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dto_request}.*;",
          "import com.alibaba.fastjson.JSONObject;",
          "",
          "public class {file_name} {",
          "",
          "    public void fixRequest(String table, String method, Object request) throws Exception {",
          "        if (request instanceof BaseRequest) {",
          "            BaseRequest baseRequest = (BaseRequest) request;",
          "            baseRequest.checkParam();",
          "",
          "            if (baseRequest.getPageSize() != null) {",
          "                if (baseRequest.getPageSize() <= 0) {",
          "                    throw new Exception(\"非法的page_size\");",
          "                }",
          "                if (baseRequest.getPageNo() == null || baseRequest.getPageNo() <= 0) {",
          "                    throw new Exception(\"非法的page_no\");",
          "                }",
          "                if (baseRequest.getQueryOptions() == null) {",
          "                    baseRequest.setQueryOptions(new JSONObject());",
          "                }",
          "                baseRequest.getQueryOptions().put(\"limit\", (baseRequest.getPageNo() - 1)* baseRequest.getPageSize());",
          "                baseRequest.getQueryOptions().put(\"count\", baseRequest.getPageSize());",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "BaseController",
        "no_overwrite": 1,
        "package_name": "{config&name=package_controller}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONObject;",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "@Getter",
          "@Setter",
          "public class {file_name} {",
          "    public JSONObject queryOptions;",
          "    public Integer pageSize;",
          "    public Integer pageNo;",
          "",
          "    public void checkParam() throws Exception {",
          "    }",
          "",
          "    public void assertNotNull(Object obj, String title) throws Exception {",
          "        if (obj == null) {",
          "            throw new Exception(title + \" is null\");",
          "        }",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "BaseRequest",
        "no_overwrite": 1,
        "package_name": "{config&name=package_dto_request}",
        "project": "src/main/java",
        "project_name": "server_static",
        "remark": "",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "@Getter",
          "@Setter",
          "public class {file_name} {",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "BaseResponse",
        "no_overwrite": 1,
        "package_name": "{config&name=package_dto_response}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import {config&name=package_dto_request}.*;",
          "",
          "public class {file_name} {",
          "",
          "    public void fixRequest(String tableName, String method, BaseRequest request) throws Exception {",
          "",
          "    }",
          "    ",
          "    public void assertNotNull(Object obj, String title) throws Exception {",
          "        if (obj == null) {",
          "            throw new Exception(title + \" is null\");",
          "        }",
          "    }",
          "    ",
          "    public Exception createFailException(String msg) {",
          "        return new Exception(msg);",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "BaseServiceImpl",
        "no_overwrite": 1,
        "package_name": "{config&name=package_service_impl}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import com.alibaba.fastjson.JSONArray;",
          "import org.springframework.beans.BeanUtils;",
          "",
          "import java.util.ArrayList;",
          "import java.util.List;",
          "",
          "public class Criterion {",
          "    private String condition;",
          "",
          "    private Object value;",
          "",
          "    private Object secondValue;",
          "",
          "    private boolean noValue;",
          "",
          "    private boolean singleValue;",
          "",
          "    private boolean betweenValue;",
          "",
          "    private boolean listValue;",
          "",
          "    private String typeHandler;",
          "",
          "    public String getCondition() {",
          "        return condition;",
          "    }",
          "",
          "    public Object getValue() {",
          "        return value;",
          "    }",
          "",
          "    public Object getSecondValue() {",
          "        return secondValue;",
          "    }",
          "",
          "    public boolean isNoValue() {",
          "        return noValue;",
          "    }",
          "",
          "    public boolean isSingleValue() {",
          "        return singleValue;",
          "    }",
          "",
          "    public boolean isBetweenValue() {",
          "        return betweenValue;",
          "    }",
          "",
          "    public boolean isListValue() {",
          "        return listValue;",
          "    }",
          "",
          "    public String getTypeHandler() {",
          "        return typeHandler;",
          "    }",
          "",
          "    public Criterion(String condition) {",
          "        super();",
          "        this.condition = condition;",
          "        this.typeHandler = null;",
          "        this.noValue = true;",
          "    }",
          "",
          "    public Criterion(String condition, Object value, String typeHandler) {",
          "        super();",
          "        this.condition = condition;",
          "        this.value = value;",
          "        this.typeHandler = typeHandler;",
          "        if (value instanceof List<?>) {",
          "            this.listValue = true;",
          "        } else {",
          "            this.singleValue = true;",
          "        }",
          "    }",
          "",
          "    public Criterion(String condition, Object value) {",
          "        this(condition, value, null);",
          "    }",
          "",
          "    public Criterion(String condition, Object value, Object secondValue, String typeHandler) {",
          "        super();",
          "        this.condition = condition;",
          "        this.value = value;",
          "        this.secondValue = secondValue;",
          "        this.typeHandler = typeHandler;",
          "        this.betweenValue = true;",
          "    }",
          "",
          "    public Criterion(String condition, Object value, Object secondValue) {",
          "        this(condition, value, secondValue, null);",
          "    }",
          "    ",
          "    public static List<Object> toList(JSONArray array, Class clz) throws IllegalAccessException, InstantiationException {",
          "        if (array == null || array.size() == 0) {",
          "            return new ArrayList<>();",
          "        }",
          "        List<Object> ret = new ArrayList<>();",
          "        for(int i = 0; i < array.size(); i++) {",
          "            Object o = array.get(i);",
          "            Object newO = null;",
          "            try {",
          "                newO = clz.newInstance();",
          "            } catch (Exception e) {",
          "                e.printStackTrace();",
          "                throw e;",
          "            }",
          "            BeanUtils.copyProperties(o, newO);",
          "            ret.add(newO);",
          "        }",
          "        return ret;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "Criterion",
        "no_overwrite": 1,
        "package_name": "{config&name=package_dao_domain}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "",
          "import com.alibaba.fastjson.JSON;",
          "import lombok.extern.slf4j.Slf4j;",
          "import org.aspectj.lang.JoinPoint;",
          "import org.aspectj.lang.ProceedingJoinPoint;",
          "import org.aspectj.lang.annotation.*;",
          "import org.springframework.beans.factory.annotation.Autowired;",
          "import org.springframework.core.annotation.Order;",
          "import org.springframework.stereotype.Component;",
          "import org.springframework.web.multipart.MultipartFile;",
          "import org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinder;",
          "",
          "import javax.servlet.ServletOutputStream;",
          "import javax.servlet.ServletRequest;",
          "import javax.servlet.ServletResponse;",
          "import javax.servlet.http.HttpServletRequest;",
          "import javax.servlet.http.HttpServletResponse;",
          "import java.io.IOException;",
          "import java.util.ArrayList;",
          "import java.util.List;",
          "",
          "@Aspect",
          "@Component",
          "@Order(-1)",
          "@Slf4j",
          "public class GlobalAop {",
          "",
          "    @Autowired",
          "    HttpServletResponse httpServletResponse;",
          "",
          "    @Autowired",
          "    HttpServletRequest httpServletRequest;",
          "",
          "    @Pointcut(\"execution(public * {config&name=package_controller}..*.*(..))\")",
          "    public void accessPointcut() {",
          "    }",
          "",
          "    @Around(\"accessPointcut()\")",
          "    public Object around(ProceedingJoinPoint pjd) throws Throwable {",
          "        doBeforeProcess(pjd);",
          "        return pjd.proceed();",
          "    }",
          "",
          "    @AfterReturning(pointcut = \"accessPointcut()\", returning = \"returnValue\")",
          "    public void afterReturning(Object returnValue) {",
          "        if (!(returnValue instanceof HttpResponse)) {",
          "",
          "            HttpResponse httpResponse = new HttpResponse(0, \"success\", returnValue);",
          "            String json = JSON.toJSONString(httpResponse);",
          "            if (json.length() < 200) {",
          "                log.info(\"response {}: {}\", json.length(), json);",
          "            } else {",
          "                log.info(\"response truncate {}: {}\", json.length(), json.substring(0, 200));",
          "            }",
          "",
          "            ServletOutputStream out = null;",
          "            try {",
          "                httpServletResponse.setCharacterEncoding(\"UTF-8\");",
          "                httpServletResponse.setContentType(\"text/json;charset=UTF-8\");",
          "                out = httpServletResponse.getOutputStream();",
          "                out.write(json.getBytes());",
          "            } catch (Exception e) {",
          "                e.printStackTrace();",
          "            } finally {",
          "                if (null != out) {",
          "                    try {",
          "                        out.flush();",
          "                        out.close();",
          "                    } catch (IOException e) {",
          "                        e.printStackTrace();",
          "                    }",
          "                }",
          "            }",
          "",
          "        }",
          "    }",
          "",
          "    public void doBeforeProcess(JoinPoint joinPoint) throws Exception {",
          "        String url = httpServletRequest.getRequestURL().toString();",
          "",
          "        List<Object> argsForLog = new ArrayList<>();",
          "",
          "        Object[] args = joinPoint.getArgs();",
          "        for (int i = 0; i < args.length; i++) {",
          "            if (args[i] instanceof ServletRequest",
          "                    || args[i] instanceof ServletResponse",
          "                    || args[i] instanceof MultipartFile",
          "                    || args[i] instanceof ExtendedServletRequestDataBinder) {",
          "                continue;",
          "            }",
          "            argsForLog.add(args[i]);",
          "        }",
          "        log.info(\"request url: {}, param: {}\", url, JSON.toJSONString(argsForLog));",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "GlobalAop",
        "no_overwrite": 1,
        "package_name": "{config&name=package_config}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import org.springframework.http.HttpStatus;",
          "import org.springframework.web.bind.annotation.ExceptionHandler;",
          "import org.springframework.web.bind.annotation.ResponseStatus;",
          "import org.springframework.web.bind.annotation.RestControllerAdvice;",
          "",
          "import java.lang.reflect.InvocationTargetException;",
          "",
          "@RestControllerAdvice",
          "public class GlobalExceptionHandler {",
          "",
          "    @ExceptionHandler(value = {Throwable.class})",
          "    @ResponseStatus(value = HttpStatus.OK)",
          "    public HttpResponse handleException(Throwable e) throws Exception {",
          "        if (e instanceof InvocationTargetException && ((InvocationTargetException) e).getTargetException() != null) {",
          "            e =  ((InvocationTargetException)e).getTargetException();",
          "        }",
          "        System.err.println(\"exception:\"+e.getMessage());",
          "        e.printStackTrace(System.err);",
          "        return new HttpResponse(-1, e.getMessage(), null);",
          "",
          "    }",
          "",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "GlobalExceptionHandler",
        "no_overwrite": 1,
        "package_name": "{config&name=package_config}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import lombok.Getter;",
          "import lombok.Setter;",
          "",
          "import java.io.Serializable;",
          "",
          "@Getter",
          "@Setter",
          "public class HttpResponse implements Serializable {",
          "    int code;",
          "    String msg;",
          "    Object body;",
          "",
          "    public HttpResponse(int code, String msg, Object body) {",
          "        this.code = code;",
          "        this.msg = msg;",
          "        this.body = body;",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "HttpResponse",
        "no_overwrite": 1,
        "package_name": "{config&name=package_config}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "package {package_name};",
          "",
          "import org.mybatis.spring.annotation.MapperScan;",
          "import org.springframework.boot.SpringApplication;",
          "import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "import org.springframework.context.annotation.Configuration;",
          "",
          "@SpringBootApplication",
          "@Configuration",
          "@MapperScan(\"{config&name=package_dao_mapper}\")",
          "public class {file_name}{",
          "    public static void main(String[] args) {",
          "        SpringApplication.run({file_name}.class, args);",
          "    }",
          "}"
        ],
        "file_type": "java",
        "id": null,
        "name": "MyApplication",
        "no_overwrite": 1,
        "package_name": "{config&name=package_application}",
        "project": "src/main/java",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "server:",
          "  port: {config&name=port_server}",
          "",
          "spring:",
          "  datasource:",
          "    driver-class-name: com.mysql.jdbc.Driver",
          "    url: jdbc:mysql://{config&name=workspace_db_host}:{config&name=workspace_db_port}/{config&name=workspace_db_name}?useUnicode=true&characterEncoding=UTF8&serverTimezone=Asia/Shanghai&tcpKeepAlive=true&autoReconnect=true",
          "    username: {config&name=workspace_db_username}",
          "    password:",
          "",
          "mybatis:",
          "  mapperLocations: classpath:mapper/*.xml",
          "  configuration:",
          "    map-underscore-to-camel-case: true"
        ],
        "file_type": "yml",
        "id": null,
        "name": "application",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "src/main/resources",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
          "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
          "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
          "    <modelVersion>4.0.0</modelVersion>",
          "",
          "    <groupId>{config&name=pom_group_id}</groupId>",
          "    <artifactId>{config&name=pom_artifact_id}</artifactId>",
          "    <version>{config&name=pom_version}</version>",
          "",
          "    <parent>",
          "        <groupId>org.springframework.boot</groupId>",
          "        <artifactId>spring-boot-starter-parent</artifactId>",
          "        <version>1.5.13.RELEASE</version>",
          "    </parent>",
          "",
          "    <dependencies>",
          "        <dependency>",
          "            <groupId>org.springframework.boot</groupId>",
          "            <artifactId>spring-boot-starter-aop</artifactId>",
          "            <version>1.5.13.RELEASE</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>org.springframework.boot</groupId>",
          "            <artifactId>spring-boot-starter-web</artifactId>",
          "            <version>1.5.13.RELEASE</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>org.apache.maven.plugins</groupId>",
          "            <artifactId>maven-resources-plugin</artifactId>",
          "            <version>2.6</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>org.projectlombok</groupId>",
          "            <artifactId>lombok</artifactId>",
          "            <version>1.18.6</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>org.mybatis.spring.boot</groupId>",
          "            <artifactId>mybatis-spring-boot-starter</artifactId>",
          "            <version>1.3.2</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>mysql</groupId>",
          "            <artifactId>mysql-connector-java</artifactId>",
          "            <version>8.0.11</version>",
          "        </dependency>",
          "        <dependency>",
          "            <groupId>com.alibaba</groupId>",
          "            <artifactId>fastjson</artifactId>",
          "            <version>1.2.47</version>",
          "        </dependency>",
          "    </dependencies>",
          "",
          "    <build>",
          "        <pluginManagement>",
          "            <plugins>",
          "                <plugin>",
          "                    <groupId>org.apache.maven.plugins</groupId>",
          "                    <artifactId>maven-compiler-plugin</artifactId>",
          "                    <version>3.5.1</version>",
          "                    <configuration>",
          "                        <source>1.8</source>",
          "                        <target>1.8</target>",
          "                    </configuration>",
          "                </plugin>",
          "            </plugins>",
          "        </pluginManagement>",
          "    </build>",
          "</project>"
        ],
        "file_type": "xml",
        "id": null,
        "name": "pom",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "server_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "export const name = '{alias_table_name&is_ajax=1}'",
          "export const module = '{alias_table_name&is_ajax=1}'",
          "export const title = '{table_comment&is_first_line=1}'",
          "",
          "import { ref } from 'vue'",
          "export function init(self) {",
          "  const obj = {",
          "    name,",
          "    module,",
          "    title,",
          "    columns: [",
          "        {*sqls&is_frontend_list=1&column_is_first=1}",
          "          {*columns}",
          "      {",
          "        prop: '{column_name&is_ajax=1}',",
          "        label: '{column_comment&is_first_line=1}',",
          "            {*column&is_string=1}",
          "        sort_by_gbk: true,",
          "            {*}",
          "      },",
          "          {*}",
          "        {*}",
          "        {*sqls&has_is_frontend_list=0}",
          "          {*table}",
          "            {*columns}",
          "      {",
          "        prop: '{column_name&is_ajax=1}',",
          "        label: '{column_comment&is_first_line=1}',",
          "            {*column&is_string=1}",
          "        sort_by_gbk: true,",
          "            {*}",
          "      },",
          "            {*}",
          "          {*}",
          "        {*}",
          "    ],",
          "    editColumns: [",
          "        {*columns}",
          "      {",
          "        prop: '{column_name&is_ajax=1}',",
          "        label: '{column_comment&is_first_line=1}',",
          "        {*column&is_date=1}",
          "        type: 'date',",
          "        {*}",
          "        {*column&is_auto_increment=1}",
          "        disabled: true,",
          "        {*}",
          "      },",
          "        {*}",
          "    ],",
          "",
          "    queryColumns: [",
          "        {*sqls&is_frontend_list=1&column_is_first=1}",
          "        {*columns&is_only_param_columns=1}",
          "      {",
          "        prop: '{column_name&is_ajax=1}',",
          "        placeholder: '{column_comment&is_first_line=1}',",
          "        default: null,",
          "        type: 'input',",
          "      },",
          "        {*}",
          "        {*}",
          "    ],",
          "",
          "    remoteConfig: {",
          "        {*sqls&is_frontend_list=1&column_is_first=1}",
          "      count: {module, method:'count_{column_name&is_ajax=1}'},",
          "        {*}",
          "        {*sqls&has_is_frontend_list=0}",
          "      count: {module, method:'count'},",
          "        {*}",
          "        {*sqls&is_frontend_list=1&column_is_first=1}",
          "      list: {module, method: 'list_{column_name&is_ajax=1}'},",
          "        {*}",
          "        {*sqls&has_is_frontend_list=0}",
          "      list: {module, method: 'list'},",
          "        {*}",
          "      edit: {module, method: 'update', keys: [",
          "        {*columns&only_primary_key=1}",
          "        '{column_name&is_ajax=1}',",
          "        {*}",
          "      ]},",
          "      add: {module, method:'add'},",
          "      delete: {module, method: 'delete', keys: [",
          "        {*columns&only_primary_key=1}",
          "        '{column_name&is_ajax=1}',",
          "        {*}",
          "      ]},",
          "      export_excel: {module, method: 'export_excel'},",
          "    }",
          "  }",
          "  for(let p in obj) {",
          "    self[p] = ref(obj[p])",
          "  }",
          "}"
        ],
        "file_type": "js",
        "id": null,
        "name": "base",
        "no_overwrite": 0,
        "package_name": "{alias_table_name&is_ajax=1}",
        "project": "src/views/sdp",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "export function init(self) {",
          "  const module = self.module.value",
          "  self.custom = {",
          "    columns : [",
          "    ],",
          "",
          "    editColumns : [",
          "    ],",
          "",
          "    queryColumns : [",
          "    ],",
          "",
          "    remoteConfig : {",
          "   }",
          " }",
          "}"
        ],
        "file_type": "js",
        "id": null,
        "name": "custom",
        "no_overwrite": 1,
        "package_name": "{alias_table_name&is_ajax=1}",
        "project": "src/views/sdp",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "</template>",
          "",
          "<script>",
          "",
          "export default {",
          "    components:{",
          "    },",
          "    props: {",
          "      self:{},",
          "    },",
          "    setup(prop,context) {",
          "        const baseMounted = (v) => {",
          "        }",
          "",
          "        return {",
          "          baseMounted,",
          "        };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "custom_index",
        "no_overwrite": 1,
        "package_name": "{alias_table_name&is_ajax=1}",
        "project": "src/views/sdp",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div>",
          "        <el-dialog :title=\"`${self.title} -> ${dialogInfo.title}`\" ref=\"dialogRef\" v-model=\"dialogInfo.visible\" width=\"80%\">",
          "            <el-form label-width=\"120px\" ref=\"formRef\" :model=\"dialogInfo.form\" :rules=\"dialogInfo.rules\">",
          "              <template v-for=\"item in dialogInfo.columns\" :key=\"item.prop\">",
          "                <template v-if=\"item.hide !== true\">",
          "                  <el-form-item",
          "                      :label=\"item.label+'('+item.prop+')'\"",
          "                      label-width=\"200px\"",
          "                      :required=\"item.required\">",
          "                    <template v-if=\"item.type == 'select'\">",
          "                      <el-select v-model=\"dialogInfo.form[item.prop]\"",
          "                          :multiple=\"item.multiple === true\"",
          "                          filterable",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                        <el-option v-for=\"item in item.list\" :key=\"item.key\" :label=\"item.label\" :value=\"item.value\"></el-option>",
          "                      </el-select>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'date'\">",
          "                      <el-date-picker v-model=\"dialogInfo.form[item.prop]\"",
          "                          format=\"YYYY-MM-DD\"",
          "                          value-format=\"YYYY-MM-DD 00:00:00\"",
          "                          :type=\"item.type\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-date-picker>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'year'\">",
          "                      <el-date-picker v-model=\"dialogInfo.form[item.prop]\"",
          "                          format=\"YYYY\"",
          "                          value-format=\"YYYY-01-01 00:00:00\"",
          "                          :type=\"item.type\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-date-picker>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'textarea'\">",
          "                      <el-input v-model=\"dialogInfo.form[item.prop]\"",
          "                          :rows=\"item.rows || 3\"",
          "                          :type=\"item.type\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-input>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'switch'\">",
          "                      <el-switch v-model=\"dialogInfo.form[item.prop]\"",
          "                          :active-value=\"'activeValue' in item ? item.activeValue : 1\"",
          "                          :inactive-value=\"'inactiveValue' in item ? item.inactiveValue : 0\"",
          "                          active-color=\"'ativeColor' in item ? item.ativeColor : #13ce66\"",
          "                          inactive-color=\"'inativeColor' in item ? item.inativeColor : #e4e7ed\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-switch>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'password'\">",
          "                      <el-input v-model=\"dialogInfo.form[item.prop]\"",
          "",
          "                          type=\"password\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-input>",
          "                    </template>",
          "                    <template v-else-if=\"item.type == 'upload'\">",
          "                      <el-upload",
          "                        v-model=\"dialogInfo.form[item.prop]\"",
          "                        ref=\"uploadRef\"",
          "                        drag",
          "                        action=\"#\"",
          "                        :file-list=\"dialogInfo.form[item.prop]\"",
          "                        ",
          "                          style=\"width:100%\"",
          "                        :disabled=\"item.disabled === true\"",
          "                        :on-change=\"item.onselectfile\"",
          "                        :auto-upload=\"false\"",
          "                        :placeholder=\"item.placeholder\"",
          "                        :clearable=\"true\"",
          "                      >",
          "                        <i class=\"el-icon-upload\"></i>",
          "                        <div class=\"el-upload__text\">",
          "                          将文件拖到此处，或",
          "                          <em>点击上传</em>",
          "                        </div>",
          "                      </el-upload>",
          "                    </template>",
          "                    <template v-else>",
          "                      <el-input v-model=\"dialogInfo.form[item.prop]\"",
          "",
          "                          style=\"width:100%\"",
          "                          :disabled=\"item.disabled === true\"",
          "                          @change=\"self.onChange({mode: 'dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})\"",
          "                          :placeholder=\"item.placeholder\"",
          "                          :clearable=\"true\">",
          "                      </el-input>",
          "                    </template>",
          "                  </el-form-item>",
          "                </template>",
          "              </template>",
          "            </el-form>",
          "            <template #footer>",
          "                <span class=\"dialog-footer\">",
          "                    <el-button @click=\"dialogInfo.hide ? dialogInfo.hide({dialogInfo}) : dialogInfo.visible = false\">取 消</el-button>",
          "                    <el-button type=\"primary\" @click=\"dialogInfo.onconfirm({...self,dialogInfo})\" :loading=\"dialogInfo.loading\">确 定</el-button>",
          "                    <el-button v-if=\"dialogInfo.title.indexOf('编辑') >= 0\" @click=\"dialogInfo.edit2add({...self,dialogInfo})\">转换为添加</el-button>",
          "                </span>",
          "            </template>",
          "        </el-dialog>",
          "    </div>",
          "</template>",
          "",
          "",
          "<script>",
          "import { ref, watch, onMounted } from 'vue'",
          "",
          "export default {",
          "    emits: ['baseMounted'],",
          "    props: {",
          "      self:{},",
          "      dialogInfo: {},",
          "    },",
          "    setup(prop,context) {",
          "",
          "        const dialogRef = ref(null)",
          "        const formRef = ref(null)",
          "        const uploadRef = ref(null)",
          "        onMounted(() => {",
          "          // prop.dialogInfo.columns.map( item => {",
          "          //   if (item.prop != 'updated_time' && item.prop != 'updated_by') {",
          "          //     return;",
          "          //   }",
          "          //   item.disabled = true",
          "          // })",
          "        ",
          "          if (!prop.dialogInfo.refs) {",
          "            prop.dialogInfo.refs = {}",
          "          }",
          "          prop.dialogInfo.refs.dialogRef = dialogRef",
          "          prop.dialogInfo.refs.formRef = formRef",
          "          prop.dialogInfo.refs.uploadRef = uploadRef",
          "          context.emit('baseMounted', {dialogInfo: prop.dialogInfo, dialogRef, formRef, uploadRef})",
          "        })",
          "        return {dialogRef,formRef, uploadRef };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "edit_dialog",
        "no_overwrite": 1,
        "package_name": "sdp",
        "project": "src/views",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "export const sdps = [",
          "{*tables}",
          "    '{column_name&is_ajax=1}',",
          "{*}",
          "]"
        ],
        "file_type": "js",
        "id": null,
        "name": "files",
        "no_overwrite": 0,
        "package_name": "router",
        "project": "src",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <importDialog",
          "      :dialogInfo=\"importDialogInfo\"",
          "      @baseMounted=\"baseMounted\"",
          "      :self=\"self\">",
          "    </importDialog>",
          "</template>",
          "",
          "",
          "<script>",
          "import { ref, watch, onMounted } from 'vue'",
          "import { post } from \"/src/api/index\";",
          "import importDialog from './edit_dialog.vue'",
          "import { ElMessage } from '/src/utils'",
          "import dayjs from 'dayjs'",
          "",
          "export default {",
          "    emits: ['baseMounted'],",
          "    components:{",
          "      importDialog,",
          "    },",
          "    props: {",
          "      self:{},",
          "      dialogInfo: {},",
          "    },",
          "    setup(prop,context) {",
          "",
          "        const importDialogInfo = ref({",
          "          title: prop.dialogInfo.title || '未知',",
          "          visible:false,",
          "          loading: false,",
          "          rules:[],",
          "          form:{},",
          "          columns:[",
          "            ...(prop.dialogInfo.columns || []),",
          "            {",
          "              prop: 'keys_info',",
          "              label: '必填字段',",
          "              oninit: ({columns, dialogInfo}) => {",
          "                dialogInfo.form.keys_info = []",
          "                for(let p in (dialogInfo.keys || {})) {",
          "                  dialogInfo.form.keys_info.push(dialogInfo.keys[p]+'('+p+')')",
          "                }",
          "                dialogInfo.form.keys_info = dialogInfo.form.keys_info.join()",
          "              },",
          "              type: 'textarea',",
          "              discard: true,",
          "              disabled: true,",
          "            },",
          "            {",
          "              prop: 'values_info',",
          "              label: '选填字段',",
          "              oninit: ({columns, dialogInfo}) => {",
          "                dialogInfo.form.values_info = []",
          "                for(let p in (dialogInfo.values || {})) {",
          "                  dialogInfo.form.values_info.push(dialogInfo.values[p]+'('+p+')')",
          "                }",
          "                dialogInfo.form.values_info = dialogInfo.form.values_info.join()",
          "              },",
          "              type: 'textarea',",
          "              disabled: true,",
          "              discard: true,",
          "            },",
          "            {",
          "              prop: 'name',",
          "              label: '随机文件名',",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'file',",
          "              label: '文件',",
          "              discard: true,",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'tip_error_msg',",
          "              label: '失败信息',",
          "              discard: true,",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'tip_error_data',",
          "              label: '失败信息',",
          "              discard: true,",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'tip_total_count',",
          "              label: '总条目',",
          "              discard: true,",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'tip_done_count',",
          "              label: '已完成条目',",
          "              discard: true,",
          "              hide: true,",
          "            },",
          "            {",
          "              prop: 'file_list',",
          "              label: '上传文件',",
          "              type: 'upload',",
          "              discard: true,",
          "              onselectfile: (file, fileList) => {",
          "                importDialogInfo.value.form.file = file.raw",
          "              }",
          "            },",
          "            {",
          "              prop: 'tip',",
          "              label: '提示信息',",
          "              type: 'textarea',",
          "              discard: true,",
          "              rows: 8,",
          "            },",
          "          ],",
          "          keys: {",
          "            ...(prop.dialogInfo.keys||[])",
          "          },",
          "          values: {",
          "            ...(prop.dialogInfo.values||[])",
          "          },",
          "          onconfirm: (param) => {",
          "            const {dialogInfo} = param",
          "            dialogInfo.form.name = 'pre_'+dayjs().format('YYYYMMDDHHmmss')+'_'+Math.floor((Math.random()*10)+1)",
          "            let form = prop.self.getFormAndcheckRequired(dialogInfo)",
          "            if (!form) {",
          "              return;",
          "            }",
          "",
          "            let newForm = {",
          "              extra_param: form,",
          "              keys: dialogInfo.keys || {},",
          "              values: dialogInfo.values || {},",
          "              excel_date_format_map:{\"mdate\":\"yyyy-MM-dd\"},",
          "            }",
          "            let formData = new FormData()",
          "            formData.append(",
          "              'request',",
          "              JSON.stringify(newForm)",
          "            )",
          "            formData.append('file', dialogInfo.form.file)",
          "            dialogInfo.loading = true",
          "            post(prop.dialogInfo.remote.module, prop.dialogInfo.remote.name, formData, {extra_headers:{'Content-Type': 'multipart/form-data;'}})",
          "            .then( data => {",
          "              if (data) {",
          "                if (data.name) {",
          "                  dialogInfo.form.name = data.name",
          "                  dialogInfo.form.tip_total_count = data.row_count - data.row_index",
          "                  dialogInfo.form.tip = `正在导入（预计${dialogInfo.form.tip_total_count}条）...`",
          "                  dialogInfo.form.tip_done_count = 0",
          "                  dialogInfo.form.tip_error_msg = ''",
          "                  dialogInfo.form.tip_error_data = {}",
          "                  ElMessage.success(dialogInfo.form.tip);",
          "                  dialogInfo.process_import(param)",
          "                  return;",
          "                } else {",
          "                  ElMessage.success(`无需导入`);",
          "                  dialogInfo.loading = false",
          "                  return;",
          "                }",
          "              }",
          "              ElMessage.error(`失败:${data}`);",
          "              dialogInfo.loading = false",
          "            })",
          "            .catch(err => {",
          "              ElMessage.error(`失败:${err}`);",
          "              dialogInfo.loading = false",
          "            })",
          "          },",
          "          process_import: (param) => {",
          "            const {dialogInfo} = param",
          "            const form = {name: dialogInfo.form.name}",
          "            post('base_import', 'progress', form)",
          "            .then( data => {",
          "              if (data) {",
          "                if (data.code && data.msg) {",
          "                  ElMessage.error(`失败:${data.msg}`);",
          "                  dialogInfo.loading = false",
          "                  return;",
          "                }",
          "                if (!data.name) {",
          "                  dialogInfo.form.tip = `导入结束，共处理 ${dialogInfo.form.tip_done_count} 条（预计${dialogInfo.form.tip_total_count}）条...`",
          "                  if(dialogInfo.form.tip_error_msg) {",
          "                    dialogInfo.form.tip += dialogInfo.form.tip_error_msg",
          "                    dialogInfo.form.tip += '\\n按F12查看详细错误'",
          "                    console.error('详细错误', dialogInfo.form.tip_error_data)",
          "                  }",
          "                  ",
          "                  ElMessage.success(dialogInfo.form.tip);",
          "                  dialogInfo.loading = false",
          "                  return;",
          "                }",
          "                if (data.current_count > 0) {",
          "                  dialogInfo.form.tip_error_msg = ''",
          "                  if (data.error_infos && data.error_infos.length > 0) {",
          "                    dialogInfo.form.tip_error_msg += `\\n失败 ${data.error_infos.length} 条`",
          "                  }",
          "                  if (data.discard_lines && data.discard_lines.length > 0) {",
          "                    dialogInfo.form.tip_error_msg += `\\n忽略 ${data.discard_lines.length} 条`",
          "                  }",
          "                  if (data.dup_lines && data.dup_lines.length > 0) {",
          "                    dialogInfo.form.tip_error_msg += `\\n重复 ${data.dup_lines.length} 条`",
          "                  }",
          "                  dialogInfo.form.tip_error_data = data",
          "",
          "                  dialogInfo.form.tip_done_count += data.current_count",
          "                  dialogInfo.form.tip = `已处理 ${dialogInfo.form.tip_done_count} 条（预计${dialogInfo.form.tip_total_count}）条...`",
          "                  dialogInfo.form.tip += dialogInfo.form.tip_error_msg",
          "                  ElMessage.success(dialogInfo.form.tip);",
          "                  dialogInfo.process_import(param)",
          "                  return;",
          "                }",
          "                setTimeout(() => {",
          "                  dialogInfo.process_import(param)",
          "                }, 1000)",
          "                return;",
          "              }",
          "              ElMessage.error(`失败:${data}`);",
          "              dialogInfo.loading = false",
          "            })",
          "            .catch(err => {",
          "              ElMessage.error(`失败:${err}`);",
          "              dialogInfo.loading = false",
          "            })",
          "          },",
          "          show: (param) => {",
          "            const {dialogInfo, query} = param",
          "            dialogInfo.form.shop_name = query.shop_name",
          "            dialogInfo.form.settle_name = query.settle_name",
          "            if (query.shop_name) {",
          "              let column = dialogInfo.columns.find( item => item.prop == 'shop_name')",
          "              if (column && column.onchange) {",
          "                column.onchange({...prop.self, mode:'init_custom_form', form: dialogInfo.form, column, columns: dialogInfo.columns})",
          "              }",
          "            }",
          "            dialogInfo.visible = true",
          "          },",
          "          hide: (param) => {",
          "            const {dialogInfo} = param",
          "            dialogInfo.visible = false",
          "            dialogInfo.form.tip = ''",
          "            dialogInfo.form.file = null",
          "            dialogInfo.refs.uploadRef.clearFiles()",
          "",
          "            if (dialogInfo.loading && dialogInfo.form.name) {",
          "              const form = {name: dialogInfo.form.name}",
          "              post('base_import', 'cancel', form)",
          "              .then( data => {",
          "                dialogInfo.loading = false",
          "              })",
          "              dialogInfo.loading = false",
          "            }",
          "",
          "          },",
          "        })",
          "",
          "        prop.self.init_remote_list(importDialogInfo.value.columns)",
          "        prop.self.importDialogInfo = importDialogInfo",
          "",
          "        importDialogInfo.value.columns.forEach( item => {",
          "          if (item.oninit) {",
          "            item.oninit({...self, mode: 'init', dialogInfo:importDialogInfo.value})",
          "          }",
          "        })",
          "",
          "        const baseMounted = () => {",
          "",
          "        }",
          "",
          "        return {",
          "          importDialogInfo,",
          "          baseMounted,",
          "        };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "import_dialog",
        "no_overwrite": 1,
        "package_name": "sdp",
        "project": "src/views",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div>",
          "        <div class=\"container\">",
          "          <div style=\"padding-bottom:10px;\">",
          "            <div class=\"handle-box\" style=\"display:flex;justify-content: flex-start; flex-wrap: wrap; align-items:center;\">",
          "              <p style=\"padding-right:10px; font-weight: bold;font-size: large;color: mediumblue;\">",
          "                {{self.title}} / {{self.name}}",
          "              </p>",
          "              <template v-for=\"(column,key) in self.queryColumns\" :key=\"key\">",
          "                <template v-if=\"column.prop != 'pageNo' && column.prop != 'pageSize' && column.hide !== true\">",
          "                  <template v-if=\"column.type == 'select'\">",
          "                    <el-select v-model=\"self.query[column.prop]\"",
          "                        :placeholder=\"column.placeholder\"",
          "                        :disabled=\"column.disabled === true\"",
          "",
          "                        :multiple=\"column.multiple === true\"",
          "                        filterable",
          "                        :collapse-tags=\"true\"",
          "",
          "                        style=\"margin-bottom:10px;\"",
          "                        @change=\"self.onChange({mode: 'query', form: self.query, column, columns: self.queryColumns})\"",
          "                        :clearable=\"true\">",
          "                      <el-option v-for=\"item in column.list\" :key=\"item.key\" :label=\"item.label\" :value=\"item.value\"></el-option>",
          "                    </el-select>",
          "                  </template>",
          "                  <template v-else-if=\"column.type == 'year'\">",
          "                    <el-date-picker v-model=\"self.query[column.prop]\"",
          "                        :placeholder=\"column.placeholder\"",
          "                        :disabled=\"column.disabled === true\"",
          "",
          "                        format=\"YYYY\"",
          "                        value-format=\"YYYY-01-01 00:00:00\"",
          "                        :type=\"column.type\"",
          "                        style=\"width:150px;margin-bottom:10px;\"",
          "",
          "                        @change=\"self.onChange({mode: 'query', form: self.query, column, columns: self.queryColumns})\"",
          "                        :clearable=\"true\">",
          "                    </el-date-picker>",
          "                  </template>",
          "                  <template v-else-if=\"column.type == 'date'\">",
          "                    <el-date-picker v-model=\"self.query[column.prop]\"",
          "                        :placeholder=\"column.placeholder\"",
          "                        :disabled=\"column.disabled === true\"",
          "",
          "                        format=\"YYYY-MM-DD\"",
          "                        value-format=\"YYYY-MM-DD 00:00:00\"",
          "                        :type=\"column.type\"",
          "                        style=\"width:150px;margin-bottom:10px;\"",
          "",
          "                        @change=\"self.onChange({mode: 'query', form: self.query, column, columns: self.queryColumns})\"",
          "                        :clearable=\"true\">",
          "                    </el-date-picker>",
          "                  </template>",
          "                  <template v-else-if=\"column.type == 'switch'\">",
          "                    <el-switch v-model=\"self.query[column.prop]\"",
          "                        :placeholder=\"column.placeholder\"",
          "                        :active-text=\"column.activeText\" :inactive-text=\"column.inactiveText\"",
          "                        :active-value=\"'activeValue' in column ? column.activeValue : 1\"",
          "                        :inactive-value=\"'inactiveValue' in column ? column.inactiveValue : 0\"",
          "                        active-color=\"'ativeColor' in column ? column.ativeColor : #13ce66\"",
          "                        inactive-color=\"'inativeColor' in column ? column.inativeColor : #e4e7ed\"",
          "",
          "                        style=\"width:100%;margin-bottom:10px;\"",
          "                        :disabled=\"column.disabled === true\"",
          "                        @change=\"self.onChange({mode: 'query', form: self.query, column, columns: self.queryColumns})\"",
          "                        :clearable=\"true\">",
          "                    </el-switch>",
          "                  </template>",
          "                  <template v-else>",
          "                    <el-input v-model=\"self.query[column.prop]\"",
          "                        :placeholder=\"column.placeholder\"",
          "                        :disabled=\"column.disabled === true\"",
          "                        style=\"width:300px;margin-bottom:10px;\"",
          "",
          "                        @change=\"self.onChange({mode: 'query', form: self.query, column, columns: self.queryColumns})\"",
          "                        :clearable=\"true\">",
          "",
          "                    </el-input>",
          "                  </template>",
          "",
          "                </template>",
          "              </template>",
          "              <el-button type=\"primary\" icon=\"el-icon-search\" style=\"margin-bottom:10px;\"",
          "                @click=\"self.handleSearch\" :loading=\"self.loadingSearch\">",
          "                搜索</el-button>",
          "              <el-button type=\"primary\" style=\"margin-bottom:10px;\"",
          "                @click=\"self.handleExport\" :loading=\"self.loadingExport\">",
          "                导出</el-button>",
          "              <el-button type=\"primary\" style=\"margin-bottom:10px;\"",
          "                @click=\"self.editDialogInfo.show({...self, title: '添加', dialogInfo:self.editDialogInfo})\">",
          "                添加</el-button>",
          "              <el-button type=\"primary\" style=\"margin-bottom:10px;\"",
          "                @click=\"self.editDialogInfo.show({...self, title: '编辑', dialogInfo:self.editDialogInfo})\">",
          "                编辑</el-button>",
          "              ",
          "              <el-button type=\"danger\" style=\"margin-bottom:10px;\"",
          "                @click=\"self.handleDelete\" :loading=\"self.loadingDelete\">",
          "                删除</el-button>",
          "              <template v-for=\"button in self.buttons\" :key=button.prop>",
          "                <el-button type=\"primary\" style=\"margin-bottom:10px;\"",
          "                  @click=\"button.onclick({...self, button})\" :loading=\"button.loading\">",
          "                  {{button.label}}</el-button>",
          "              </template>",
          "            </div>",
          "          </div>",
          "            <el-table :data=\"self.tableData\" border class=\"table\" ref=\"multipleTable\"",
          "                  @row-click=\"self.onRowClick\"",
          "                  @selection-change=\"self.onTableSelectionChange\"",
          "                  @cell-dblclick=\"self.cellDblclick\"",
          "                  :highlight-current-row=\"true\"",
          "                  :height=\"tableHeight\"",
          "                  :max-height=\"tableHeight\"",
          "                  header-cell-class-name=\"table-header\">",
          "                <el-table-column",
          "                  type=\"selection\"",
          "                  width=\"60\"",
          "                  fixed=\"left\"",
          "                ></el-table-column>",
          "                <template v-for=\"item in self.columns\">",
          "                <el-table-column v-if=\"item.hide !== true\" :key = item.prop",
          "                      row-style=\"{height:30px; max-height:30px;}\"",
          "                      :prop=\"item.prop\" :label=\"item.label+'('+item.prop+')'\" :width=\"item.width||200\">",
          "                       <!-- show-overflow-tooltip -->",
          "                    <template #default=\"scope\">",
          "                      <span v-if=\"scope.row[item.prop] && (scope.row[item.prop]+'').length > 10\">",
          "                        <el-popover placement=\"top-start\" width=\"300\" trigger=\"hover\" :content=\"scope.row[item.prop]\">",
          "                          <template #reference>",
          "                            <span>{{ scope.row[item.prop] }}</span>",
          "                          </template>",
          "                        </el-popover>",
          "                      </span>",
          "                      <span v-else>{{ scope.row[item.prop] }}</span>",
          "                    </template>",
          "",
          "                    <template #header=\"{ column }\">",
          "                      <p v-if=\"item.sortable !== false\" @click=\"self.sortMethod(column)\">",
          "                        <span>{{ column.label }}</span>",
          "                        <span",
          "                          v-if=\"item.order === 'asc' || item.order === 'asc/gbk'\"",
          "                          style=\"font-size: 1.5em\"",
          "                        >",
          "                          <i",
          "                            class=\"el-icon-caret-top\"",
          "                            style=\"color: mediumseagreen\"",
          "                          ></i>",
          "                          <span style=\"font-size: 0.5em; color: mediumseagreen\">",
          "                            {{ item.orderIndex }}",
          "                          </span>",
          "                        </span>",
          "                        <span",
          "                          v-else-if=\"item.order === 'desc' || item.order === 'desc/gbk'\"",
          "                          style=\"font-size: 1.5em\"",
          "                        >",
          "                          <i",
          "                            class=\"el-icon-caret-bottom\"",
          "                            style=\"color: mediumseagreen\"",
          "                          ></i>",
          "                          <span style=\"font-size: 0.5em; color: mediumseagreen\">",
          "                            {{ item.orderIndex }}",
          "                          </span>",
          "                        </span>",
          "                        <span v-else style=\"font-size: 1.5em\">",
          "                          <i class=\"el-icon-d-caret\" style=\"color: lightgray\"></i>",
          "                        </span>",
          "                      </p>",
          "                      <p v-else>",
          "                        <span>{{ column.label }}</span>",
          "                      </p>",
          "                    </template>",
          "                </el-table-column>",
          "                </template>",
          "            </el-table>",
          "            <div class=\"pagination\">",
          "                <el-pagination background layout=\"total, sizes, prev, pager, next, jumper\" ref=\"tablePagination\"",
          "                    :current-page=\"self.query.pageNo\"",
          "                    :page-size=\"self.query.pageSize\"",
          "                    :page-sizes=\"self.pageSizes\"",
          "                    :total=\"self.pageTotal\"",
          "                    @size-change=\"self.handleSizeChange\"",
          "                    @current-change=\"self.handlePageChange\"></el-pagination>",
          "            </div>",
          "        </div>",
          "",
          "        <editDialog",
          "          :dialogInfo=\"self.editDialogInfo\"",
          "          :self=\"self\">",
          "        </editDialog>",
          "    </div>",
          "</template>",
          "",
          "",
          "<script>",
          "import { ref, onMounted } from 'vue'",
          "import editDialog from './edit_dialog.vue'",
          "",
          "export default {",
          "    components:{",
          "      editDialog,",
          "    },",
          "    props: {",
          "      self:{}",
          "    },",
          "    setup(prop,context) {",
          "      ",
          "        const multipleTable = ref(null)",
          "        const editDialog = ref(null)",
          "        const editForm = ref(null)",
          "        const tablePagination = ref(null)",
          "        const tableHeight = ref('70vh')",
          "        onMounted(() => {",
          "          setTimeout( () => {",
          "            const newHeight = window.innerHeight - tablePagination.value.$el.offsetHeight - 110 - multipleTable.value.$el.offsetTop",
          "            if (tableHeight.value != newHeight) {",
          "              tableHeight.value = newHeight",
          "            }",
          "            context.emit('baseMounted', {multipleTable, editDialog, editForm})",
          "          }, 0)",
          "        })",
          "        window.onresize = () => {",
          "          setTimeout( () => {",
          "            const newHeight = window.innerHeight - tablePagination.value.$el.offsetHeight - 110 - multipleTable.value.$el.offsetTop",
          "            if (tableHeight.value != newHeight) {",
          "              tableHeight.value = newHeight",
          "            }",
          "          }, 0)",
          "        }",
          "",
          "        window.display_popover = ref(false)",
          "        return {multipleTable, editDialog, editForm, tablePagination, tableHeight, display_popover: window.display_popover };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "index",
        "no_overwrite": 1,
        "package_name": "sdp",
        "project": "src/views",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "  <basetemplate",
          "    @baseMounted=\"baseMounted\"",
          "    :self=\"self\">",
          "  </basetemplate>",
          "  <customtemplate",
          "    @baseMounted=\"customMounted\"",
          "    :self=\"self\">",
          "  </customtemplate>",
          "</template>",
          "",
          "<script>",
          "import { ref } from 'vue'",
          "import basetemplate from '../index.vue'",
          "import customtemplate from './custom_index.vue'",
          "import { init } from '/src/utils/base'",
          "import { init as initBase } from './base'",
          "import { init as initCustom } from './custom'",
          "",
          "export default {",
          "    components:{",
          "      basetemplate,",
          "      customtemplate,",
          "    },",
          "    setup() {",
          "        let self = {}",
          "        ",
          "        initBase(self)",
          "        initCustom(self)",
          "        init(self)",
          "",
          "        const baseMounted = (v) => {",
          "          self.onMounted(v);",
          "        }",
          "        const customMounted = (v) => {",
          "          if (self.custom.onMounted) {",
          "            self.custom.onMounted(v)",
          "          }",
          "        }",
          "        return {self:ref(self), baseMounted, customMounted};",
          "    },",
          "};",
          "</script>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "index",
        "package_name": "{alias_table_name&is_ajax=1}",
        "project": "src/views/sdp",
        "project_name": "web_page",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          ".DS_Store",
          "node_modules",
          "/dist",
          "",
          "",
          "# local env files",
          ".env.local",
          ".env.*.local",
          "",
          "# Log files",
          "npm-debug.log*",
          "yarn-debug.log*",
          "yarn-error.log*",
          "pnpm-debug.log*",
          "",
          "# Editor directories and files",
          ".idea",
          ".vscode"
        ],
        "file_type": "gitignore",
        "id": null,
        "name": "",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <router-view />",
          "</template>",
          "",
          "<script>",
          "import { ref } from 'vue'",
          "import { getStorageValue } from '/src/utils'",
          "",
          "window.vue_store = ref({})",
          "window.vue_store.value.collapse = getStorageValue('collapse') ? true : false",
          "",
          "export default {};",
          "</script>",
          "",
          "<style>",
          "@import \"./assets/css/main.css\";",
          "@import \"./assets/css/color-dark.css\";",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "App",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div class=\"header\">",
          "        <!-- 折叠按钮 -->",
          "        <div class=\"collapse-btn\" @click=\"collapseChage\">",
          "            <i v-if=\"!collapse\" class=\"el-icon-s-fold\"></i>",
          "            <i v-else class=\"el-icon-s-unfold\"></i>",
          "        </div>",
          "        <div class=\"logo\">SDP</div>",
          "        <div v-if=\"false\" class=\"header-right\">",
          "            <div class=\"header-user-con\">",
          "                <!-- 用户名下拉菜单 -->",
          "                <el-dropdown class=\"user-name\" trigger=\"click\" @command=\"handleCommand\">",
          "                    <span class=\"el-dropdown-link\">",
          "                        {{username}}",
          "                        <i class=\"el-icon-caret-bottom\"></i>",
          "                    </span>",
          "                    <template #dropdown>",
          "                        <el-dropdown-menu>",
          "                            <el-dropdown-item command=\"user\">个人中心</el-dropdown-item>",
          "                            <el-dropdown-item divided command=\"loginout\">退出登录</el-dropdown-item>",
          "                        </el-dropdown-menu>",
          "                    </template>",
          "                </el-dropdown>",
          "            </div>",
          "        </div>",
          "    </div>",
          "</template>",
          "<script>",
          "import { computed, onMounted } from 'vue'",
          "import { useRouter } from 'vue-router'",
          "import { getStorageValue, setStorageValue, tokenName, userInfoStorageName } from '/src/utils'",
          "export default {",
          "    setup() {",
          "        const userInfo = getStorageValue(userInfoStorageName)",
          "        const username = (userInfo || {}).name + ' ( '+(userInfo || {}).code+' )'",
          "        const message = 2;",
          "",
          "        const collapse = computed(() => window.vue_store.value.collapse);",
          "",
          "        // 侧边栏折叠",
          "        const collapseChage = () => {",
          "            window.vue_store.value.collapse = ! window.vue_store.value.collapse",
          "            setStorageValue('collapse', window.vue_store.value.collapse)",
          "        };",
          "",
          "        onMounted(() => {",
          "            if (document.body.clientWidth < 1500) {",
          "                collapseChage();",
          "            }",
          "        });",
          "",
          "        // 用户名下拉菜单选择事件",
          "        const router = useRouter();",
          "        const handleCommand = (command) => {",
          "            if (command == \"loginout\") {",
          "                setStorageValue(userInfoStorageName, '')",
          "                setStorageValue(tokenName, '')",
          "                router.push(\"/login\");",
          "            } else if (command == \"user\") {",
          "                router.push(\"/user\");",
          "            }",
          "        };",
          "",
          "        return {",
          "            username,",
          "            message,",
          "            collapse,",
          "            collapseChage,",
          "            handleCommand,",
          "        };",
          "    },",
          "};",
          "</script>",
          "<style scoped>",
          ".header {",
          "    position: relative;",
          "    box-sizing: border-box;",
          "    width: 100%;",
          "    height: 50px;",
          "    font-size: 22px;",
          "    color: #fff;",
          "}",
          ".collapse-btn {",
          "    float: left;",
          "    padding: 0 21px;",
          "    cursor: pointer;",
          "    line-height: 50px;",
          "}",
          ".header .logo {",
          "    float: left;",
          "    width: 250px;",
          "    line-height: 50px;",
          "}",
          ".header-right {",
          "    float: right;",
          "    padding-right: 50px;",
          "}",
          ".header-user-con {",
          "    display: flex;",
          "    height: 50px;",
          "    align-items: center;",
          "}",
          ".user-name {",
          "    margin-left: 10px;",
          "}",
          ".el-dropdown-link {",
          "    color: #fff;",
          "    cursor: pointer;",
          "}",
          ".el-dropdown-menu__item {",
          "    text-align: center;",
          "}",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "Header",
        "no_overwrite": 1,
        "package_name": "components",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div>",
          "        <v-header />",
          "        <v-sidebar />",
          "        <div class=\"content-box\" :class=\"{ 'content-collapse': collapse }\">",
          "            <div class=\"content\">",
          "                <router-view>",
          "                </router-view>",
          "            </div>",
          "        </div>",
          "    </div>",
          "</template>",
          "<script>",
          "import { computed } from 'vue'",
          "import vHeader from \"../components/Header.vue\";",
          "import vSidebar from \"../components/Sidebar.vue\";",
          "export default {",
          "    components: {",
          "        vHeader,",
          "        vSidebar,",
          "    },",
          "    setup() {",
          "        const collapse = computed(() => window.vue_store.value.collapse);",
          "        return {",
          "            collapse,",
          "        };",
          "    },",
          "};",
          "</script>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "Home",
        "no_overwrite": 1,
        "package_name": "views",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "MIT License"
        ],
        "file_type": "txt",
        "id": null,
        "name": "LICENSE",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div class=\"login-wrap\">",
          "        <div class=\"ms-login\" style=\"width:400px\">",
          "            <div class=\"ms-title\">SDP</div>",
          "            <el-form :model=\"param\" :rules=\"rules\" ref=\"login\" label-width=\"0px\" class=\"ms-content\">",
          "                <el-form-item prop=\"username\">",
          "                    <el-input v-model=\"param.username\" placeholder=\"用户名\">",
          "                        <template #prepend>",
          "                            <el-button icon=\"el-icon-user\"></el-button>",
          "                        </template>",
          "                    </el-input>",
          "                </el-form-item>",
          "                <el-form-item prop=\"password\">",
          "                    <el-input type=\"password\" placeholder=\"密码\" v-model=\"param.password\">",
          "                        <template #prepend>",
          "                            <el-button icon=\"el-icon-lock\"></el-button>",
          "                        </template>",
          "                    </el-input>",
          "                </el-form-item>",
          "                <el-form-item prop=\"vcode\">",
          "                    <p style=\"display:flex; position: relative\">",
          "                        <el-input placeholder=\"验证码\" v-model=\"param.vcode\">",
          "                            <template #prepend>",
          "                                <el-button icon=\"el-icon-message\"></el-button>",
          "                            </template>",
          "                        </el-input>",
          "                        <el-button type=\"primary\" @click=\"sendVCode()\" style=\"width:200px\">{{sendVCodeTitle}}</el-button>",
          "                    </p>",
          "                </el-form-item>",
          "                <div class=\"login-btn\">",
          "                    <el-button type=\"primary\" @click=\"submitForm()\">登录</el-button>",
          "                </div>",
          "            </el-form>",
          "        </div>",
          "    </div>",
          "</template>",
          "",
          "<script>",
          "import { ref, reactive } from 'vue'",
          "import { useRouter } from 'vue-router'",
          "import { ElMessage } from '/src/utils'",
          "import { post } from '../api/index'",
          "import { getStorageValue, setStorageValue, tokenName, userInfoStorageName } from '/src/utils'",
          "import md5 from 'js-md5'",
          "",
          "export default {",
          "    setup() {",
          "        ",
          "        const router = useRouter();",
          "        ",
          "        const userInfo = getStorageValue(userInfoStorageName)",
          "",
          "        let username = userInfo ? userInfo.code : 'admin'",
          "",
          "        const param = reactive({",
          "            username,",
          "            password: \"\",",
          "            vcode:'',",
          "        });",
          "",
          "        const rules = {",
          "            username: [",
          "                {",
          "                    required: true,",
          "                    message: \"请输入用户名\",",
          "                    trigger: \"blur\",",
          "                },",
          "            ],",
          "        };",
          "        const login = ref(null);",
          "        const submitForm = () => {",
          "            rules.password = [{ required: true, message: \"请输入密码\", trigger: \"blur\" }]",
          "            rules.vcode = [{ required: true, message: \"请输入验证码\", trigger: \"blur\" }]",
          "            login.value.validate((valid) => {",
          "                if(!valid) {",
          "                    return;",
          "                }",
          "                let password = md5(param.username + param.password)",
          "                post('auth', 'login', {username: param.username, password: password, vcode:param.vcode})",
          "                .then( data => {",
          "                    if (data && data[tokenName]) {",
          "                        ElMessage.success(\"登录成功\");",
          "                        setStorageValue(tokenName, data[tokenName]);",
          "                        setStorageValue(userInfoStorageName, JSON.stringify(data));",
          "                        router.push(\"/\");",
          "                    } else {",
          "                        console.error('error', data)",
          "                        ElMessage.error(\"登录失败\");",
          "                        return false;",
          "                    }",
          "                })",
          "                .catch( error => {",
          "                    console.error('error', error)",
          "                    ElMessage.error(\"登录失败\");",
          "                    return false;",
          "                })",
          "",
          "            });",
          "            delete rules.vcode",
          "            delete rules.password",
          "        };",
          "",
          "        const sendVCodeTitle = ref('获取验证码')",
          "        const getPhoneIntval = ref(null)",
          "        const sendVCode = () => {",
          "            if (sendVCodeTitle.value !== '获取验证码') {",
          "                return;",
          "            }",
          "            login.value.validate((valid) => {",
          "                if(!valid) {",
          "                    return;",
          "                }",
          "                post('auth', 'send_vcode', {name:param.username})",
          "                .then( data => {",
          "                    if (data == 'ok') {",
          "                        ElMessage.success(\"发送成功\");",
          "                        let n = 60",
          "                        sendVCodeTitle.value = '重新获取(' + n + 's)'",
          "                        getPhoneIntval.value = setInterval(() => {",
          "                            if (n > 1) {",
          "                                n--",
          "                                sendVCodeTitle.value = '重新获取(' + n + 's)'",
          "                            } else {",
          "                                getPhoneIntval.value = null",
          "                                clearInterval(getPhoneIntval.value)",
          "                                sendVCodeTitle.value = '获取验证码'",
          "                            }",
          "                        }, 1000)",
          "                        return;",
          "                    }",
          "                })",
          "            })",
          "        }",
          "",
          "        return {",
          "            param,",
          "            rules,",
          "            login,",
          "            submitForm,",
          "            sendVCode,",
          "            sendVCodeTitle,",
          "        };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          ".login-wrap {",
          "    position: relative;",
          "    width: 100%;",
          "    height: 100%;",
          "    background-color:deepskyblue;",
          "    background-image: radial-gradient(burlywood, deepskyblue);",
          "    background-size: 100%;",
          "}",
          ".ms-title {",
          "    width: 100%;",
          "    line-height: 50px;",
          "    text-align: center;",
          "    font-size: 20px;",
          "    color: #fff;",
          "    border-bottom: 1px solid #ddd;",
          "}",
          ".ms-login {",
          "    position: absolute;",
          "    left: 50%;",
          "    top: 50%;",
          "    width: 350px;",
          "    margin: -190px 0 0 -175px;",
          "    border-radius: 5px;",
          "    background: rgba(255, 255, 255, 0.3);",
          "    overflow: hidden;",
          "}",
          ".ms-content {",
          "    padding: 30px 30px;",
          "}",
          ".login-btn {",
          "    text-align: center;",
          "}",
          ".login-btn button {",
          "    width: 100%;",
          "    height: 36px;",
          "    margin-bottom: 10px;",
          "}",
          ".login-tips {",
          "    font-size: 12px;",
          "    line-height: 30px;",
          "    color: #fff;",
          "}",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "Login",
        "no_overwrite": 1,
        "package_name": "views",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "# sdp frontend",
          "base on vue-manage-system",
          "https://github.com/lin-xin/vue-manage-system"
        ],
        "file_type": "md",
        "id": null,
        "name": "README",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div class=\"sidebar\">",
          "        <el-menu class=\"sidebar-el-menu\" :default-active=\"onRoutes\" :collapse=\"collapse\" background-color=\"#324157\"",
          "            text-color=\"#bfcbd9\" active-text-color=\"#20a0ff\" unique-opened router>",
          "            <template v-for=\"item in items\">",
          "                <template v-if=\"item.subs\">",
          "                    <el-submenu :index=\"item.index\" :key=\"item.index\">",
          "                        <template #title>",
          "                            <i :class=\"item.icon\"></i>",
          "                            <span>{{ item.title }}</span>",
          "                        </template>",
          "                        <template v-for=\"subItem in item.subs\">",
          "                            <el-submenu v-if=\"subItem.subs\" :index=\"subItem.index\" :key=\"subItem.index\">",
          "                                <template #title>{{ subItem.title }}</template>",
          "                                <el-menu-item v-for=\"(threeItem, i) in subItem.subs\" :key=\"i\" :index=\"threeItem.index\">",
          "                                    {{ threeItem.title }}</el-menu-item>",
          "                            </el-submenu>",
          "                            <el-menu-item v-else :index=\"subItem.index\" :key=\"subItem.index\">{{ subItem.title }}",
          "                            </el-menu-item>",
          "                        </template>",
          "                    </el-submenu>",
          "                </template>",
          "                <template v-else>",
          "                    <el-menu-item :index=\"item.index\" :key=\"item.index\">",
          "                        <i :class=\"item.icon\"></i>",
          "                        <template #title>{{ item.title }}</template>",
          "                    </el-menu-item>",
          "                </template>",
          "            </template>",
          "        </el-menu>",
          "    </div>",
          "</template>",
          "",
          "<script>",
          "import { computed, watch } from 'vue'",
          "import { useRoute } from 'vue-router'",
          "import { sdps } from '../router/files'",
          "",
          "",
          "export default {",
          "    setup() {",
          "        const items = sdps.map ( sdp => ({ index: '/' + sdp, title: sdp }))",
          "",
          "        const route = useRoute();",
          "",
          "        const onRoutes = computed(() => {",
          "            return route.path;",
          "        });",
          "",
          "        const collapse = computed(() => window.vue_store.value.collapse);",
          "",
          "        return {",
          "            items,",
          "            onRoutes,",
          "            collapse,",
          "        };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          ".sidebar {",
          "    display: block;",
          "    position: absolute;",
          "    left: 0;",
          "    top: 50px;",
          "    bottom: 0;",
          "    overflow-y: scroll;",
          "}",
          ".sidebar::-webkit-scrollbar {",
          "    width: 0;",
          "}",
          ".sidebar-el-menu:not(.el-menu--collapse) {",
          "    width: 250px;",
          "}",
          ".sidebar > ul {",
          "    height: 100%;",
          "}",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "Sidebar",
        "no_overwrite": 1,
        "package_name": "components",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<template>",
          "    <div>",
          "        <el-row :gutter=\"20\">",
          "            <el-col :span=\"12\">",
          "                <el-card shadow=\"hover\">",
          "                    <template #header>",
          "                        <div class=\"clearfix\">",
          "                            <span>账户编辑</span>",
          "                        </div>",
          "                    </template>",
          "                    <el-form label-width=\"90px\">",
          "                        <el-form-item label=\"登录名：\"> {{ userInfo.code }} </el-form-item>",
          "                        <el-form-item label=\"用户名：\"> {{ userInfo.name }} </el-form-item>",
          "                        <el-form-item label=\"角色：\"> {{ userInfo.role_name }} </el-form-item>",
          "                        <el-form-item label=\"旧密码：\">",
          "                            <el-input type=\"password\" v-model=\"form.old\"></el-input>",
          "                        </el-form-item>",
          "                        <el-form-item label=\"新密码：\">",
          "                            <el-input type=\"password\" v-model=\"form.new\"></el-input>",
          "                        </el-form-item>",
          "                        <el-form-item>",
          "                            <el-button type=\"primary\" @click=\"onSubmit\">保存</el-button>",
          "                        </el-form-item>",
          "                    </el-form>",
          "                </el-card>",
          "            </el-col>",
          "        </el-row>",
          "    </div>",
          "</template>",
          "",
          "<script>",
          "import { reactive, ref } from 'vue'",
          "import { ElMessage } from '/src/utils'",
          "import { userInfoStorageName } from '/src/utils'",
          "export default {",
          "    name: \"user\",",
          "    components: {",
          "    },",
          "    setup() {",
          "        let userInfo = localStorage.getItem(userInfoStorageName) || {}",
          "        try {",
          "            userInfo = JSON.parse(userInfo)",
          "",
          "        }catch(ex) {",
          "            console.error('ex', ex)",
          "        }",
          "        const form = reactive({",
          "            old: \"\",",
          "            new: \"\",",
          "        });",
          "        const onSubmit = () => {",
          "            ElMessage.error('暂未实现')",
          "        };",
          "",
          "",
          "        return {",
          "            userInfo,",
          "            form,",
          "            onSubmit,",
          "        };",
          "    },",
          "};",
          "</script>",
          "",
          "<style scoped>",
          "</style>"
        ],
        "file_type": "vue",
        "id": null,
        "name": "User",
        "no_overwrite": 1,
        "package_name": "views",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "module.exports = {",
          "  presets: ['@vue/cli-plugin-babel/preset'],",
          "}"
        ],
        "file_type": "config.js",
        "id": null,
        "name": "babel",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "/* eslint-disable */",
          "",
          "import { getStorageValue, setStorageValue } from '/src/utils'",
          "import { ref, unref, reactive, h } from 'vue'",
          "import { post } from \"/src/api/index\";",
          "import { ElMessage } from '/src/utils'",
          "import { ElMessageBox } from 'element-plus'",
          "",
          "import dayjs from 'dayjs'",
          "",
          "export function init(self) {",
          "  const fixBlankFileds = (obj, obj_ori, columns) => {",
          "    let objOri = {...(obj_ori || {})}",
          "    for (let p in objOri) {",
          "      if (typeof(objOri[p]) === 'string') {",
          "        objOri[p] = objOri[p].trim()",
          "      }",
          "    }",
          "  ",
          "    let objOut = {...obj}",
          "    let count = 0",
          "    for (let p in objOut) {",
          "      let column = null",
          "      if (columns) {",
          "        column = columns.find(item => item.prop === p)",
          "      }",
          "      if (column && column.discard) {",
          "        delete objOut[p]",
          "        continue;",
          "      }",
          "      if (typeof(objOut[p]) === 'string') {",
          "        objOut[p] = objOut[p].trim()",
          "      }",
          "      if (objOut[p] instanceof Array && objOut[p].length == 0) {",
          "        if (!(p in objOri)) {",
          "          delete objOut[p]",
          "          continue;",
          "        }",
          "        if (objOri[p] instanceof Array && objOri[p].length == 0) {",
          "          delete objOut[p]",
          "          continue;",
          "        }",
          "      }",
          "      if (objOut[p] === '' || objOut[p] === null || objOut[p] === undefined) {",
          "        if (!(p in objOri)) {",
          "          delete objOut[p]",
          "          continue;",
          "        }",
          "        if (objOri[p] === '' || objOri[p] === null || objOri[p] === undefined) {",
          "          delete objOut[p]",
          "          continue",
          "        }",
          "      }",
          "      if (p in objOri && objOut[p] === objOri[p]) {",
          "        delete objOut[p]",
          "        continue;",
          "      }",
          "      count++",
          "    }",
          "    if (count == 0) {",
          "      return null;",
          "    }",
          "  ",
          "    return objOut",
          "  }",
          "  ",
          "  self.fixBlankFileds = fixBlankFileds",
          "  self.buttons = ref([])",
          "  self.columns.value.splice(0, 0, {",
          "    prop: '#',",
          "    label: '#',",
          "    type: 'index',",
          "    width: 60,",
          "    sortable: false,",
          "    discard_export: true,",
          "  })",
          "",
          "  //不导出id",
          "  {",
          "    const column = self.columns.value.find(e => e.prop == 'id')",
          "    if (column) {",
          "      column.discard_export = true",
          "    }",
          "  }",
          "",
          "  //设置列表的remark字段宽度",
          "  {",
          "    const column = self.columns.value.find(e => e.prop == 'remark')",
          "    if (column) {",
          "      column.width = 300",
          "    }",
          "  }",
          "",
          "  //设置编辑form的remark字段类型",
          "  {",
          "    const column = self.editColumns.value.find(e => e.prop == 'remark')",
          "    if (column) {",
          "      column.type = 'textarea'",
          "    }",
          "  }",
          "",
          "  const customButtons = (self.custom || {}).buttons || []",
          "  const customColumns = (self.custom || {}).columns || []",
          "  const customEditColumns = (self.custom || {}).editColumns || []",
          "  const customqueryColumns = (self.custom || {}).queryColumns || []",
          "  const customRemoteConfig = (self.custom || {}).remoteConfig || {}",
          "",
          "  //针对columns进行排序",
          "  customColumns.forEach( (item, index) => {",
          "    item.sortNo = 99999+index",
          "  })",
          "  self.columns.value.forEach( (item,index) => {",
          "    item.sortNo = index*100",
          "    item.sortNoInc = 0",
          "  })",
          "  customColumns.forEach((item, index) => {",
          "    let oriItem = self.columns.value.find( ele => ele.prop == item.prop)",
          "    if (oriItem) {",
          "      for(let p in item) {",
          "        if (p == 'sortNo') {",
          "          continue;",
          "        }",
          "        oriItem[p] = item[p]",
          "      }",
          "      {",
          "        let preItem = null",
          "        let preItemIndex = index - 1;",
          "        while(preItem === null && preItemIndex >= 0) {",
          "          preItem = self.columns.value.find( ele => ele.prop == customColumns[preItemIndex].prop)",
          "          preItemIndex--",
          "        }",
          "        if (preItem) {",
          "          preItem.sortNoInc++",
          "          oriItem.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        }",
          "      }",
          "      return item",
          "    }",
          "    {",
          "      let preItem = null",
          "      let preItemIndex = index - 1;",
          "      while(preItem === null && preItemIndex >= 0) {",
          "        preItem = self.columns.value.find( ele => ele.prop == customColumns[preItemIndex].prop)",
          "        preItemIndex--",
          "      }",
          "      if (preItem) {",
          "        preItem.sortNoInc++",
          "        item.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        self.columns.value.push(item)",
          "        return item",
          "      }",
          "    }",
          "    self.columns.value.push(item)",
          "  })",
          "  self.columns.value = self.columns.value.sort(function compareFunction(param1, param2) {",
          "    return param1.sortNo - param2.sortNo",
          "  })",
          "",
          "  //针对editColumns进行排序",
          "  customEditColumns.forEach( (item, index) => {",
          "    item.sortNo = 99999+index",
          "  })",
          "  self.editColumns.value.forEach( (item,index) => {",
          "    item.sortNo = index*100",
          "    item.sortNoInc = 0",
          "  })",
          "  customEditColumns.forEach((item, index) => {",
          "    let oriItem = self.editColumns.value.find( ele => ele.prop == item.prop)",
          "    if (oriItem) {",
          "      for(let p in item) {",
          "        if (p == 'sortNo') {",
          "          continue;",
          "        }",
          "        oriItem[p] = item[p]",
          "      }",
          "      {",
          "        let preItem = null",
          "        let preItemIndex = index - 1;",
          "        while(preItem === null && preItemIndex >= 0) {",
          "          preItem = self.editColumns.value.find( ele => ele.prop == customEditColumns[preItemIndex].prop)",
          "          preItemIndex--",
          "        }",
          "        if (preItem) {",
          "          preItem.sortNoInc++",
          "          oriItem.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        }",
          "      }",
          "      return item",
          "    }",
          "    {",
          "      let preItem = null",
          "      let preItemIndex = index - 1;",
          "      while(preItem === null && preItemIndex >= 0) {",
          "        preItem = self.editColumns.value.find( ele => ele.prop == customEditColumns[preItemIndex].prop)",
          "        preItemIndex--",
          "      }",
          "      if (preItem) {",
          "        preItem.sortNoInc++",
          "        item.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        self.editColumns.value.push(item)",
          "        return item",
          "      }",
          "    }",
          "    self.editColumns.value.push(item)",
          "  })",
          "  self.editColumns.value = self.editColumns.value.sort(function compareFunction(param1, param2) {",
          "    return param1.sortNo - param2.sortNo",
          "  })",
          "",
          "  for(let p in customRemoteConfig) {",
          "    let item = customRemoteConfig[p]",
          "    let oriItem = self.remoteConfig.value[p]",
          "    if (oriItem) {",
          "      for(let p in item) {",
          "        oriItem[p] = item[p]",
          "      }",
          "    } else {",
          "      self.remoteConfig.value[p] = item",
          "    }",
          "  }",
          "",
          "  //针对queryColumns进行排序",
          "  customqueryColumns.forEach( (item, index) => {",
          "    item.sortNo = 99999+index",
          "    item.sortNoInc = 0",
          "  })",
          "  self.queryColumns.value.forEach( (item,index) => {",
          "    item.sortNo = index*100",
          "    item.sortNoInc = 0",
          "  })",
          "  customqueryColumns.forEach( (item, index) => {",
          "    let oriItem = self.queryColumns.value.find( ele => ele.prop == item.prop)",
          "    if (oriItem) {",
          "      for(let p in item) {",
          "        if (p == 'sortNo') {",
          "          continue;",
          "        }",
          "        oriItem[p] = item[p]",
          "      }",
          "      {",
          "        let preItem = null",
          "        let preItemIndex = index - 1;",
          "        while(preItem === null && preItemIndex >= 0) {",
          "          preItem = self.queryColumns.value.find( ele => ele.prop == customqueryColumns[preItemIndex].prop)",
          "          preItemIndex--",
          "        }",
          "        if (preItem) {",
          "          preItem.sortNoInc++",
          "          oriItem.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        }",
          "      }",
          "      return item;",
          "    }",
          "    {",
          "      let preItem = null",
          "      let preItemIndex = index - 1;",
          "      while(preItem === null && preItemIndex >= 0) {",
          "        preItem = self.queryColumns.value.find( ele => ele.prop == customqueryColumns[preItemIndex].prop)",
          "        preItemIndex--",
          "      }",
          "      if (preItem) {",
          "        preItem.sortNoInc++",
          "        item.sortNo = preItem.sortNo + preItem.sortNoInc",
          "        self.queryColumns.value.push(item)",
          "        return item",
          "      }",
          "    }",
          "    self.queryColumns.value.push(item)",
          "  })",
          "  self.queryColumns.value = self.queryColumns.value.sort(function compareFunction(param1, param2) {",
          "    return param1.sortNo - param2.sortNo",
          "  })",
          "",
          "  customButtons.forEach ( item => {",
          "    let oriItem = self.buttons.value.find( ele => ele.prop == item.prop)",
          "    if (oriItem) {",
          "      for(let p in item) {",
          "        oriItem[p] = item[p]",
          "      }",
          "    } else {",
          "      self.buttons.value.push(item)",
          "    }",
          "  })",
          "",
          "  let queryInfoList = self.queryColumns.value",
          "",
          "  let pageSize = getStorageValue('pageSize')",
          "  if (!pageSize) {",
          "    pageSize = 10",
          "  } else {",
          "    pageSize = parseInt(pageSize)",
          "  }",
          "  queryInfoList = [",
          "    ...queryInfoList,",
          "    {prop:'pageNo', default: 1, result_value_type:'int'},",
          "    {prop:'pageSize', default: pageSize, result_value_type:'int'}",
          "  ]",
          "  let shopName = getStorageValue('shop_name')",
          "  let sortInfo = getStorageValue('order_'+self.name.value)",
          "  if (sortInfo && sortInfo instanceof Array) {",
          "    let sortInfoMap = {}",
          "    sortInfo.forEach((item) => {",
          "      if (item.order) {",
          "        sortInfoMap[item.prop] = item",
          "      }",
          "    })",
          "    self.columns.value.forEach(item => {",
          "      if (item.prop in sortInfoMap) {",
          "        item.order = sortInfoMap[item.prop].order",
          "        item.orderIndex = sortInfoMap[item.prop].orderIndex",
          "      }",
          "    })",
          "  }",
          "",
          "  self.query = ref({})",
          "",
          "  for(let i in queryInfoList) {",
          "    i = queryInfoList[i]",
          "    if (i.prop === 'shop_name' && shopName) {",
          "      i.default = shopName",
          "    }",
          "    self.query.value[i.prop] = i.default",
          "    let v = getStorageValue('query_'+self.name.value+'_'+i.prop)",
          "    try {",
          "      const newV = JSON.parse(v)",
          "      if (newV instanceof Array) {",
          "        v = newV",
          "      }",
          "    }catch(ex) {",
          "",
          "    }",
          "    if (v || v === 0) {",
          "      self.query.value[i.prop] = v;",
          "    }",
          "  }",
          "",
          "  self.init_remote_list = (columns)  => {",
          "    columns.forEach( column => {",
          "      let r = column.list_remote",
          "      if (r && r.mode !== 'dynamic') {",
          "        column.list = []",
          "        post(r.module, r.method, r.query, {sortInfo:r.sortInfo})",
          "        .then( data => {",
          "          data.forEach( item => {",
          "              column.list.push({ key:item[r.mapInfo.key], label:item[r.mapInfo.label], value:item[r.mapInfo.value]})",
          "            })",
          "        })",
          "      }      ",
          "    })",
          "  }",
          "",
          "  self.init_remote_list(self.queryColumns.value)",
          "",
          "  self.selectRows = ref([])",
          "",
          "  self.multipleTable = ref(null)",
          "",
          "  self.tablePagination = ref(null)",
          "",
          "  self.sortColumns = ref([])",
          "",
          "  self.tableData = ref([]);",
          "  self.pageTotal = ref(0);",
          "",
          "  self.discardCount = ref(false)",
          "",
          "  self.loadingSearch = ref(false)",
          "",
          "  self.loadingDelete = ref(false)",
          "",
          "  self.loadingExport = ref(false)",
          "",
          "  self.pageSizes = ref([10,50,100,1000])",
          "",
          "  self.editDialog = ref(null)",
          "  self.editForm = ref(null)",
          "",
          "  self.form_rules = ref([])",
          "",
          "  self.editTitle = ref('')",
          "  self.editVisible = ref(false)",
          "  self.form = ref({})",
          "  self.form_ori = ref({})",
          "",
          "  self.onTableSelectionChange = (a, b, c) => {",
          "    self.selectRows.value = a",
          "  }",
          "",
          "  self.get_remote_list = ({columns, prop, query}) => {",
          "    try {",
          "      let column = columns.find( item => item.prop == prop);",
          "      if (!column || !column.list_remote) {",
          "        return;",
          "      }",
          "      const r = column.list_remote",
          "  ",
          "      query = {...r.query, ...query}",
          "      return post(r.module, r.method, query, {sortInfo:r.sortInfo})",
          "      .then( data => {",
          "        column.list = []",
          "        data.forEach( item => {",
          "          column.list.push({ key:item[r.mapInfo.key], label:item[r.mapInfo.label], value:item[r.mapInfo.value]})",
          "        })",
          "        return {...self, column}",
          "      })",
          "    }catch(ex) {",
          "      console.error('get_remote_list fail', ex)",
          "    }",
          "  }",
          "",
          "  const set_query_storage = (form, prop, value) => {",
          "    form[prop] = value",
          "    setStorageValue('query_'+self.name.value+'_'+prop, value)",
          "  }",
          "",
          "  self.set_query_storage = set_query_storage",
          "",
          "  const onChange = (param) => {",
          "    const {mode, form, column, columns} = param",
          "    if (mode == 'query') {",
          "      self.discardCount.value = false",
          "    }",
          "    if (form[column.prop] instanceof Array) {",
          "      let newForm = []",
          "      let foundBlank = false",
          "      form[column.prop].forEach( item => {",
          "        if (item === '') {",
          "          foundBlank = true",
          "        } else {",
          "          newForm.push(item)",
          "        }",
          "      })",
          "      if (foundBlank && newForm.length > 0) {",
          "        form[column.prop] = newForm",
          "      }",
          "    }",
          "    if (mode == 'query') {",
          "      if (column.prop == 'shop_name') {",
          "        setStorageValue('shop_name', form[column.prop])",
          "      } else {",
          "        setStorageValue('query_'+self.name.value+'_'+column.prop, form[column.prop])",
          "      }",
          "    }",
          "",
          "    if (column.onchange) {",
          "      let cb = column.onchange",
          "      if (typeof(cb) == 'string') {",
          "        cb = (columns.find( item2 => item2.prop == column.onchange) || {}).onchange",
          "      }",
          "      if(cb) {",
          "        cb({...self, ...param})",
          "      }",
          "    }",
          "  }",
          "",
          "  self.sortMethod = a => {",
          "    if (a) {",
          "      let column = self.columns.value.find((item) => item.prop === a.property)",
          "      if (column.order === 'desc' || column.order === 'desc/gbk') {",
          "        column.order = null",
          "        column.orderIndex = null",
          "      } else if (column.sort_by_gbk) {",
          "        if (column.order === 'asc/gbk') {",
          "          column.order = 'desc/gbk'",
          "        } else {",
          "          column.order = 'asc/gbk'",
          "        }",
          "      } else {",
          "        if (column.order === 'asc') {",
          "          column.order = 'desc'",
          "        } else {",
          "          column.order = 'asc'",
          "        }",
          "      }",
          "      if (column.order) {",
          "        if (!column.orderIndex) {",
          "          column.orderIndex = 0",
          "          self.columns.value.forEach((item) => {",
          "            if (item.order && item.orderIndex > column.orderIndex) {",
          "              column.orderIndex = item.orderIndex",
          "            }",
          "          })",
          "          column.orderIndex++",
          "        }",
          "      } else {",
          "        column.column_index = null",
          "      }",
          "      let orderList = []",
          "      self.columns.value.forEach ( item => {",
          "        if (item.order && item.orderIndex >= 0) {",
          "          orderList.push({prop: item.prop, order: item.order, orderIndex: item.orderIndex})",
          "        }",
          "      })",
          "      setStorageValue(",
          "        'order_' + self.name.value,",
          "        orderList",
          "      )",
          "    }",
          "",
          "    self.sortColumns.value = []",
          "    self.columns.value.forEach((item) => {",
          "      if (item.order) {",
          "        self.sortColumns.value.push(item)",
          "      }",
          "    })",
          "    let sortCondition = []",
          "    self.sortColumns.value",
          "      .sort(function compareFunction(param1, param2) {",
          "        return param1.orderIndex - param2.orderIndex",
          "      })",
          "      .forEach((item) => {",
          "        item.orderIndex = sortCondition.length + 1",
          "        let sortItem = new Object()",
          "        sortItem[item.prop] = item.order",
          "        sortCondition.push(sortItem)",
          "      })",
          "",
          "  }",
          "",
          "  self.onRowClick = (a) => {",
          "    if (self.selectRows.value.length > 1) {",
          "      let found = false",
          "      self.selectRows.value.forEach((item) => {",
          "        if (item.id === a.id) {",
          "          found = true",
          "        }",
          "      })",
          "      if (found) {",
          "        return",
          "      }",
          "      ElMessageBox.confirm('是否要取消其他选择状态？', '警告', {",
          "        confirmButtonText: '确定',",
          "        cancelButtonText: '取消',",
          "        closeOnClickModal: false,",
          "        type: 'warning',",
          "      })",
          "        .then(() => {",
          "          if (self.multipleTable.value.clearSelection) {",
          "            self.multipleTable.value.clearSelection()",
          "          }",
          "          if (self.multipleTable.value.toggleRowSelection) {",
          "            self.multipleTable.value.toggleRowSelection(a)",
          "          }",
          "        })",
          "        .catch(() => {",
          "          if (self.multipleTable.value.toggleRowSelection) {",
          "            self.multipleTable.value.toggleRowSelection(a)",
          "          }",
          "        })",
          "    } else {",
          "      if (self.multipleTable.value.clearSelection) {",
          "        self.multipleTable.value.clearSelection()",
          "      }",
          "      if (self.multipleTable.value.toggleRowSelection) {",
          "        self.multipleTable.value.toggleRowSelection(a)",
          "      }",
          "    }",
          "  }",
          "",
          "  self.processData = (data, self) => {",
          "    try {",
          "      const donePropSet = {}",
          "      if (data && data.length && self.columns.value && self.columns.value.length) {",
          "        let index = 1",
          "        const columnnMap = {}",
          "        data.forEach( item => {",
          "          item['#'] = index++",
          "  ",
          "          for(const p in item) {",
          "            let column = donePropSet[p]",
          "            if (!column) {",
          "              column = self.columns.value.find( column1 => column1.prop == p)",
          "              if (!column) {",
          "                column = {",
          "                  prop: p,",
          "                  label: p,",
          "                }",
          "                donePropSet[p] = column",
          "                self.columns.value.push(column)",
          "              }",
          "            }",
          "            if (column.oninit) {",
          "              let cb = column.oninit",
          "              if (typeof(cb) == 'string') {",
          "                cb = (self.columns.value.find( item2 => item2.prop == cb) || {}).oninit",
          "              }",
          "              if (cb) {",
          "                cb({...self, mode: 'init_data', form: item, column, columns: self.columns.value})",
          "              }",
          "            }",
          "          }",
          "        })",
          "      }",
          "    } catch(ex) {",
          "      console.error('processData ex', ex)",
          "    }",
          "  }",
          "  ",
          "  self.getData = () => {",
          "    let remoteCount = self.remoteConfig.value.count",
          "    if (!remoteCount) {",
          "      ElMessage.error('未定义count')",
          "      return;",
          "    }",
          "    let remoteList = self.remoteConfig.value.list",
          "    if (!remoteList) {",
          "      ElMessage.error('未定义list')",
          "      return;",
          "    }",
          "    self.loadingSearch.value = true;",
          "    let query = fixBlankFileds(self.query.value)",
          "    if (!query) {",
          "      query = {}",
          "    }",
          "    if (self.sortColumns.value.length) {",
          "      if (!('query_options' in query)) {",
          "        query.query_options = {}",
          "      }",
          "      query.query_options.order_by = []",
          "      self.sortColumns.value.forEach( item => {",
          "        let newItem = {}",
          "        newItem[item.prop] = item.order",
          "        query.query_options.order_by.push(newItem)",
          "      })",
          "    }",
          "    ",
          "    if (self.discardCount.value) {",
          "      return post(remoteList.module, remoteList.method, query)",
          "      .then(data => {",
          "        self.processData(data, self)",
          "        self.tableData.value = data",
          "        self.loadingSearch.value = false;",
          "        self.discardCount.value = true",
          "      })",
          "      .catch(err => {",
          "        self.loadingSearch.value = false;",
          "      })",
          "    } else {",
          "      post(remoteCount.module, remoteCount.method, query)",
          "      .then ( data => {",
          "        self.pageTotal.value = data",
          "      })",
          "      .then ( data => {",
          "        return post(remoteList.module, remoteList.method, query)",
          "        .then(data => {",
          "          self.processData(data, self)",
          "          self.tableData.value = data",
          "          self.loadingSearch.value = false;",
          "          self.discardCount.value = true",
          "        })",
          "      })",
          "      .catch(err => {",
          "        self.loadingSearch.value = false;",
          "      })",
          "    }",
          "  };",
          "",
          "  self.handleSearch = () => {",
          "    if (self.query.value.shop_name) {",
          "      setStorageValue('shopName', self.query.value.shop_name)",
          "    } else {",
          "      setStorageValue('shopName', null)",
          "    }",
          "    self.getData();",
          "  };",
          "",
          "  self.handlePageChange = (val) => {",
          "    self.query.value.pageNo = val;",
          "    self.getData();",
          "  };",
          "",
          "  self.handleSizeChange = (val) => {",
          "    self.query.value.pageSize = val;",
          "    setStorageValue('pageSize', val)",
          "    // self.getData();",
          "  }",
          "",
          "  self.handleExport = () => {",
          "",
          "    let remote = self.remoteConfig.value.export_excel",
          "    if (!remote) {",
          "      ElMessage.error('未定义export_excel方法')",
          "      return;",
          "    }",
          "    let discards = {}",
          "    if (remote.discards) {",
          "      remote.discards.forEach ( item => {",
          "        discards[item] = 1",
          "      })",
          "    }",
          "",
          "    let fields = []",
          "    let export_excel_fields = []",
          "    self.columns.value.forEach( item => {",
          "      if (item.prop in discards) {",
          "        return",
          "      }",
          "      if (item.hide) {",
          "        return;",
          "      }",
          "      if (item.discard_export) {",
          "        return;",
          "      }",
          "      fields.push(item.prop);",
          "      export_excel_fields.push({prop:item.prop, title:item.label, width:(item.width || 200)/10})",
          "    })",
          "",
          "    self.loadingExport.value = true;",
          "    let query = {",
          "      ...fixBlankFileds(self.query.value),",
          "      pageNo:undefined, pageSize:undefined,",
          "      export_excel_fields,",
          "    }",
          "",
          "    if (!query) {",
          "      query = {}",
          "    }",
          "",
          "    if (self.sortColumns.value.length) {",
          "      if (!('query_options' in query)) {",
          "        query.query_options = {}",
          "      }",
          "      query.query_options.order_by = []",
          "      self.sortColumns.value.forEach( item => {",
          "        let newItem = {}",
          "        newItem[item.prop] = item.order",
          "        query.query_options.order_by.push(newItem)",
          "      })",
          "    }",
          "",
          "    if (self.custom.extra_export_query) {",
          "      query = {...self.custom.extra_export_query, ...query}",
          "    }",
          "    if (self.custom.extra_export_columns && query.export_excel_fields) {",
          "      for(const extraProp in self.custom.extra_export_columns) {",
          "        const newArr = []",
          "        for(const columnIndex in query.export_excel_fields) {",
          "          const column = query.export_excel_fields[columnIndex]",
          "          if (column.prop == extraProp) {",
          "            for(let i = 0; i <= columnIndex; i++) {",
          "              newArr.push(query.export_excel_fields[i])",
          "            }",
          "            for(let i = 0; i < self.custom.extra_export_columns[extraProp].length; i++) {",
          "              newArr.push(self.custom.extra_export_columns[extraProp][i])",
          "            }",
          "            for(let i = columnIndex + 1; i < query.export_excel_fields.length; i++) {",
          "              newArr.push(query.export_excel_fields[i])",
          "            }",
          "            break",
          "          }",
          "        }",
          "        query.export_excel_fields = newArr",
          "      }",
          "    }",
          "",
          "    post(remote.module, remote.method, query, {responseType: 'arraybuffer'})",
          "    .then( data => {",
          "      self.loadingExport.value = false;",
          "      let link = document.createElement('a')",
          "      let blob = new Blob([data], {",
          "        type: 'application/vnd.ms-excel'",
          "      })",
          "      link.href = window.URL.createObjectURL(blob)",
          "      link.download = self.module.value + '_' + dayjs().format('YYYYMMDDHHmmss') + '.xls'",
          "      document.body.appendChild(link)",
          "      link.click()",
          "    })",
          "    .catch(err => {",
          "      ElMessage.error(`失败:${err}`);",
          "      self.loadingExport.value = false;",
          "    })",
          "  }",
          "",
          "  self.handleDelete = (index) => {",
          "    if (self.selectRows.value.length == 0) {",
          "      ElMessage.error('请先选择记录');",
          "      return;",
          "    }",
          "      // 二次确认删除",
          "      ElMessageBox.confirm(\"确定要删除吗？\", \"提示\", {",
          "          type: \"warning\",",
          "      })",
          "          .then(() => {",
          "            let remote = self.remoteConfig.value.delete",
          "            if (!remote.keys || remote.keys.length == 0) {",
          "              ElMessage.error(`未配置keys:${remote}`);",
          "              return;",
          "            }",
          "      ",
          "            self.loadingDelete.value = true;",
          "            let form = {}",
          "            remote.keys.forEach( key => {",
          "              form[key] = []",
          "              self.selectRows.value.forEach( row => {",
          "                form[key].push(row[key])",
          "              })",
          "            })",
          "            ",
          "            post(remote.module, remote.method, form)",
          "            .then( data => {",
          "              if (data) {",
          "                ElMessage.success(`成功`);",
          "                self.getData()",
          "              } else {",
          "                ElMessage.error(`失败:${data}`);",
          "              }",
          "              self.loadingDelete.value = false;",
          "            })",
          "            .catch(err => {",
          "              ElMessage.error(`失败:${err}`);",
          "              self.loadingDelete.value = false;",
          "            })",
          "          })",
          "          .catch((err) => {",
          "            ElMessage.error(`失败:${err}`);",
          "            self.loadingDelete.value = false;",
          "          });",
          "  };",
          "",
          "  self.getFormAndcheckRequired = ({form, columns}) => {",
          "    let newForm = fixBlankFileds(form, null, columns)",
          "    for(let item in columns) {",
          "      item = columns[item]",
          "      if (item.required) {",
          "        if (!newForm || !(item.prop in newForm) || !newForm[item.prop]) {",
          "          ElMessage.error(`请输入:${item.label}`);",
          "          return null;",
          "        }",
          "      }",
          "    }",
          "    return newForm",
          "  }",
          "",
          "  self.baseMounted = (v) => {",
          "    for(let p in v) {",
          "      self[p].value = v[p].value;",
          "    }",
          "  }",
          "",
          "  self.cellDblclick = (row, propItem) => {",
          "    console.log('cellDblclick', row, propItem)",
          "    if (row && propItem && row[propItem.property]) {",
          "      ElMessageBox({",
          "        message: h('textarea', {rows: '20'}, row[propItem.property]),",
          "        customClass:'cellDblclickClass',",
          "      })",
          "    }",
          "  }",
          "",
          "  const getOnlySelectRowData = (selectRows) => {",
          "    if (!selectRows || selectRows.length == 0) {",
          "      ElMessage.error('请先选择记录');",
          "      return null;",
          "    }",
          "    if (selectRows.length > 1) {",
          "      ElMessage.error('只能选择一条记录进行编辑');",
          "      return null;",
          "    }",
          "    return selectRows[0]",
          "  }",
          "",
          "  self.getOnlySelectRowData = getOnlySelectRowData",
          "",
          "  self.editDialogInfo = ref({",
          "    title: ((self.editDialogInfo || ref({})).value || {}).title || '未知',",
          "    visible:false,",
          "    loading: false,",
          "    rules:[],",
          "    form:{},",
          "    columns:[",
          "      ...self.editColumns.value,",
          "    ],",
          "    edit2add: (param) => {",
          "      const {dialogInfo, remoteConfig, getFormAndcheckRequired} = param",
          "      dialogInfo.title = '添加';",
          "      dialogInfo.form_ori = {}",
          "    },",
          "    onconfirm: (param) => {",
          "      const {dialogInfo, remoteConfig, getFormAndcheckRequired} = param",
          "      let remote;",
          "      let newData = null;",
          "      let needRefresh = false;",
          "      let form = getFormAndcheckRequired({form: dialogInfo.form, columns: dialogInfo.columns})",
          "      if (!form) {",
          "        return;",
          "      }",
          "      if ((dialogInfo.title || '').indexOf('编辑') >= 0) {",
          "        newData = fixBlankFileds(dialogInfo.form, dialogInfo.form_ori, dialogInfo.columns)",
          "        if (!newData) {",
          "          ElMessage.error(`未改动任何值`);",
          "          return;",
          "        }",
          "        for(let item in dialogInfo.columns) {",
          "          item = dialogInfo.columns[item]",
          "          if (newData[item.prop]) {",
          "            if(item.refresh) {",
          "              needRefresh = true",
          "            }",
          "          }",
          "        }",
          "        remote = remoteConfig.edit",
          "        if (!remote.keys || remote.keys.length == 0) {",
          "          ElMessage.error(`未配置keys:${remote}`);",
          "          return;",
          "        }",
          "        form = {...newData}",
          "        remote.keys.forEach(key => {",
          "          form[key] = dialogInfo.form_ori[key]",
          "        })",
          "      } else {",
          "        remote = remoteConfig.add",
          "      }",
          "      dialogInfo.loading = true",
          "      post(remote.module, remote.method, form)",
          "      .then( data => {",
          "        if (data) {",
          "          ElMessage.success(`修改成功`);",
          "          if (newData && !needRefresh) {",
          "            for(let p in newData) {",
          "              dialogInfo.form_ori[p] = newData[p]",
          "            }",
          "          } else {",
          "            self.getData()",
          "          }",
          "          dialogInfo.visible = false;",
          "          dialogInfo.loading = false",
          "          if (self.custom.saveEditAfter) {",
          "            self.custom.saveEditAfter({form, self})",
          "          }",
          "        } else {",
          "          ElMessage.error(`失败:${data}`);",
          "          dialogInfo.loading = false",
          "        }",
          "      })",
          "      .catch(err => {",
          "        ElMessage.error(`失败:${err}`);",
          "        dialogInfo.loading = false",
          "      })",
          "    },",
          "    show: (param) => {",
          "      const {dialogInfo, query, title} = param",
          "      dialogInfo.title = title",
          "",
          "      self.init_remote_list(self.editColumns.value)",
          "",
          "      if (title == '编辑') {",
          "        const selectRowData = getOnlySelectRowData(self.selectRows.value)",
          "        if (!selectRowData) {",
          "          return;",
          "        }",
          "        dialogInfo.form = {...selectRowData}",
          "        dialogInfo.form_ori = self.selectRows.value[0]",
          "        dialogInfo.columns.forEach( item => {",
          "          if (item.oninit) {",
          "            let cb = item.oninit",
          "            if (typeof(cb) == 'string') {",
          "              cb = (dialogInfo.columns.find( item2 => item2.prop == cb) || {}).oninit",
          "            }",
          "            if(cb) {",
          "              cb({...self, mode: 'init_dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})",
          "            }",
          "          }",
          "        })",
          "        dialogInfo.columns.forEach( item => {",
          "          if (item.onchange && dialogInfo.form[item.prop]) {",
          "            let cb = item.onchange",
          "            if (typeof(cb) == 'string') {",
          "              cb = (dialogInfo.columns.find( item2 => item2.prop == cb) || {}).onchange",
          "            }",
          "            if(cb) {",
          "              cb({...self, mode: 'init_dialog', form: dialogInfo.form, column: item, columns: dialogInfo.columns})",
          "            }",
          "          }",
          "        })",
          "      } else {",
          "        dialogInfo.form = {}",
          "        dialogInfo.form_ori = {}",
          "      }",
          "      ",
          "      dialogInfo.visible = true",
          "    },",
          "    hide: (param) => {",
          "      const {dialogInfo} = param",
          "      dialogInfo.visible = false",
          "      dialogInfo.loading = false",
          "    },",
          "  })",
          "",
          "  self.columns.value.forEach( item => {",
          "    if (item.required) {",
          "      let obj = {}",
          "      obj[item.prop] = { required: true, trigger: 'blur', message: '请输入'+item.label },",
          "      self.form_rules.value.push(obj)",
          "    }",
          "  })",
          "",
          "  self.queryColumns.value.forEach( item => {",
          "    if (self.query.value[item.prop] && item.onchange) {",
          "      item.onchange({...self, mode: 'init', form: self.query.value, column: item, columns: self.queryColumns.value})",
          "    }",
          "  })",
          "",
          "  self.onMounted = (v) => {",
          "    if (v) {",
          "      for(let p in v) {",
          "        self[p].value = v[p].value;",
          "      }",
          "    }",
          "    self.sortMethod();",
          "    if (self.refresh_oninit !== false) {",
          "      self.getData();",
          "    }",
          "    if (self.custom.onMounted) {",
          "      self.custom.onMounted();",
          "    }",
          "  }",
          "",
          "  self.onChange = onChange",
          "}"
        ],
        "file_type": "js",
        "id": null,
        "name": "base",
        "no_overwrite": 1,
        "package_name": "utils",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "start /b npm run build",
          "pause"
        ],
        "file_type": "bat",
        "id": null,
        "name": "build",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          ".header{",
          "    background-color: #242f42;",
          "}",
          ".login-wrap{",
          "    background: #324157;",
          "}",
          ".tags-li.active {",
          "    border: 1px solid #409EFF;",
          "    background-color: #409EFF;",
          "}",
          ".message-title{",
          "    color: #20a0ff;",
          "}",
          ".collapse-btn:hover{",
          "    background: rgb(40,52,70);",
          "}"
        ],
        "file_type": "css",
        "id": null,
        "name": "color-dark",
        "no_overwrite": 1,
        "package_name": "css",
        "project": "src/assets",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "[class*=\" el-icon-lx\"],",
          "[class^=el-icon-lx] {",
          "    font-family: lx-iconfont !important;",
          "}"
        ],
        "file_type": "css",
        "id": null,
        "name": "icon",
        "no_overwrite": 1,
        "package_name": "css",
        "project": "src/assets",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "<!DOCTYPE html>",
          "<html lang=\"\">",
          "",
          "<head>",
          "  <meta charset=\"utf-8\">",
          "  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">",
          "  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">",
          "",
          "  <title>SDP</title>",
          "</head>",
          "",
          "<body>",
          "  <noscript>",
          "    <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled.",
          "      Please enable it to continue.</strong>",
          "  </noscript>",
          "  <div id=\"app\">",
          "  </div>",
          "  <script type=\"module\" src=\"/src/main.js\"></script>",
          "  <!-- built files will be auto injected -->",
          "</body>",
          "",
          "</html>"
        ],
        "file_type": "html",
        "id": null,
        "name": "index",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import request from '../utils/request';",
          "import { ElMessage } from '/src/utils'",
          "",
          "import { getStorageValue } from '/src/utils'",
          "",
          "export const post = (module, method, query, config) => {",
          "    config = {...(config||{})}",
          "    let sortInfo = config.sortInfo",
          "    delete config.sortInfo",
          "    let urlPrefix = getStorageValue('url_prefix')",
          "    let url",
          "    if (urlPrefix) {",
          "        url = urlPrefix + module+'/'+method",
          "    } else {",
          "        url = '/api2/' + module+'/'+method",
          "    }",
          "    return request({",
          "        url,",
          "        method: 'post',",
          "        data: query,",
          "        ...(config||{}),",
          "    })",
          "    .then( (response) => {",
          "        const {data, config} = response",
          "        if (!data) {",
          "            return data;",
          "        }",
          "        if (config.withConfig) {",
          "            return response",
          "        }",
          "        if ((config||{}).responseType === 'arraybuffer') {",
          "            return data;",
          "        }",
          "        if (data.code) {",
          "            ElMessage.error(data.msg);",
          "            return Promise.reject(data);",
          "        }",
          "",
          "        if (data.body && data.body instanceof Array) {",
          "            if (sortInfo && sortInfo instanceof Array) {",
          "                return data.body.sort(function compareFunction(param1, param2) {",
          "                    for(let i in sortInfo) {",
          "                        let direction = 1;",
          "                        let p = sortInfo[i]",
          "                        if (typeof(p) !== 'string') {",
          "                            for(let pi in p) {",
          "                                direction = p[pi] == 'asc' ? 1 : -1;",
          "                                p = pi",
          "                            }",
          "                        }",
          "                        let v1 = param1[p]",
          "                        let v2 = param2[p]",
          "                        let ret = 0;",
          "                        if (typeof(v1) === 'number' && typeof(v2) === 'number') {",
          "                            ret = v1 - v2;",
          "                        }",
          "                        if (ret) {",
          "                            return ret * direction;",
          "                        }",
          "                        if (typeof(v1) === 'string' && typeof(v2) === 'string') {",
          "                            ret = v1.localeCompare(v2, 'zh')",
          "                        }",
          "                        if (ret) {",
          "                            return ret * direction;",
          "                        }",
          "                        ret = (v1+'').localeCompare((v2+''), 'zh')",
          "                        if (ret) {",
          "                            return ret * direction;",
          "                        }",
          "                    }",
          "                    return 0;",
          "                })",
          "            }",
          "            return data.body",
          "        }",
          "",
          "        if ('body' in data && data.body !== null) {",
          "            return data.body",
          "        }",
          "        return data",
          "    })",
          "    .catch( error => {",
          "        throw error",
          "        // ElMessage.error('请求失败: '+error+','+JSON.stringify(error));",
          "        // Promise.reject(error);",
          "    })",
          "}"
        ],
        "file_type": "js",
        "id": null,
        "name": "index",
        "no_overwrite": 1,
        "package_name": "api",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import {createRouter, createWebHashHistory} from 'vue-router'",
          "import Home from \"../views/Home.vue\";",
          "import { getStorageValue, tokenName } from '/src/utils'",
          "",
          "import { sdps } from './files'",
          "",
          "const routes = [",
          "    {",
          "        path: '/',",
          "        redirect: '/'+sdps[0]",
          "    }, {",
          "        path: \"/\",",
          "        name: \"Home\",",
          "        component: Home,",
          "        children: [",
          "            ...sdps.map ( sdp => ({",
          "                path: '/' + sdp,",
          "                name: sdp,",
          "                meta: { title: sdp },",
          "                component: () => import ( `../views/sdp/${sdp}/index.vue`)",
          "            })),",
          "            {",
          "                path: '/user',",
          "                name: 'user',",
          "                meta: { title: '个人中心' },",
          "                component: () => import ('../views/User.vue')",
          "            }",
          "        ]",
          "    }, {",
          "        path: \"/login\",",
          "        name: \"Login\",",
          "        meta: {",
          "            title: '登录'",
          "        },",
          "        component: () => import ( \"../views/Login.vue\")",
          "    }",
          "];",
          "",
          "const router = createRouter({",
          "    history: createWebHashHistory(),",
          "    routes",
          "});",
          "",
          "router.beforeEach((to, from, next) => {",
          "    document.title = `${to.meta.title} | SDP`;",
          "    const sessionid = getStorageValue(tokenName)",
          "    if (!sessionid && to.path !== '/login') {",
          "        next('/login');",
          "    } else if (to.meta.permission) {",
          "        next()",
          "    } else {",
          "        next();",
          "    }",
          "});",
          "",
          "export default router;"
        ],
        "file_type": "js",
        "id": null,
        "name": "index",
        "no_overwrite": 1,
        "package_name": "router",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import { ElMessage as ElMessage2 } from \"element-plus\";",
          "import dayjs from 'dayjs'",
          "",
          "export const authPath = window.auth_type",
          "export const tokenName = 'sessionid'",
          "export const userInfoStorageName = 'user_info'",
          "",
          "export function getStorageValue(key) {",
          "  if (tokenName == key) {",
          "    return tokenName",
          "  }",
          "  let item = localStorage.getItem(key)",
          "  if (item) {",
          "    try {",
          "      let newItem = JSON.parse(item)",
          "      try {",
          "        newItem = JSON.parse(newItem)",
          "      }catch(ex) {",
          "      }",
          "      return newItem;",
          "    }catch(ex) {",
          "      // console.error('getStorageValue fail', ex, key)",
          "    }",
          "  }",
          "  return item;",
          "}",
          "",
          "export function setStorageValue(key, value) {",
          "  return localStorage.setItem(key, JSON.stringify(value))",
          "}",
          "",
          "export function removeStorageValue(key) {",
          "  return localStorage.removeItem(key)",
          "}",
          "",
          "export const ElMessage = {",
          "  error: (msg) => {",
          "    console.error(dayjs().format('YYYY-MM-DD HH:mm:ss'), msg)",
          "    ElMessage2.error(msg)",
          "  },",
          "  success: (msg) => {",
          "    console.warn(dayjs().format('YYYY-MM-DD HH:mm:ss'), msg)",
          "    ElMessage2.success(msg)",
          "  },",
          "  warning: (msg) => {",
          "    console.warn(dayjs().format('YYYY-MM-DD HH:mm:ss'), msg)",
          "    ElMessage2.warning(msg)",
          "  },",
          "",
          "}"
        ],
        "file_type": "js",
        "id": null,
        "name": "index",
        "no_overwrite": 1,
        "package_name": "utils",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "start /b npm install",
          "pause"
        ],
        "file_type": "bat",
        "id": null,
        "name": "install",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "* {",
          "    margin: 0;",
          "    padding: 0;",
          "}",
          "",
          "html,",
          "body,",
          "#app,",
          ".wrapper {",
          "    width: 100%;",
          "    height: 100%;",
          "    overflow: hidden;",
          "}",
          "",
          "body {",
          "    font-family: 'PingFang SC', \"Helvetica Neue\", Helvetica, \"microsoft yahei\", arial, STHeiTi, sans-serif;",
          "}",
          "",
          "a {",
          "    text-decoration: none",
          "}",
          "",
          "",
          ".content-box {",
          "    position: absolute;",
          "    left: 250px;",
          "    right: 0;",
          "    top: 50px;",
          "    bottom: 0;",
          "    padding-bottom: 30px;",
          "    -webkit-transition: left .3s ease-in-out;",
          "    transition: left .3s ease-in-out;",
          "    background: #f0f0f0;",
          "}",
          "",
          ".content {",
          "    width: auto;",
          "    padding: 10px;",
          "    overflow-y: scroll;",
          "    box-sizing: border-box;",
          "}",
          "",
          ".content-collapse {",
          "    left: 65px;",
          "}",
          "",
          ".container {",
          "    padding: 10px;",
          "    background: #fff;",
          "    border: 1px solid #ddd;",
          "    border-radius: 5px;",
          "}",
          "",
          ".el-table th {",
          "    background-color: #f5f7fa !important;",
          "}",
          "",
          "tr.el-table__row .cell {",
          "    white-space: nowrap !important;",
          "}",
          "",
          ".pagination {",
          "    margin: 20px 0;",
          "    text-align: right;",
          "}",
          "",
          ".el-button+.el-tooltip {",
          "    margin-left: 10px;",
          "}",
          "",
          ".el-table tr:hover {",
          "    background: #f6faff;",
          "}",
          "",
          ".el-badge {",
          "    margin-right: 15px;",
          "    background-color: unset;",
          "}",
          "",
          ".cellDblclickClass {",
          "    width: 80% !important;",
          "}",
          "",
          ".el-message-box__message textarea {",
          "    font-family:Arial;",
          "    font-size:18px;",
          "    font-weight:400;",
          "    line-height:40px;",
          "    height: 500px;",
          "    width: 99%;",
          "    padding-left: 10px;",
          "}"
        ],
        "file_type": "css",
        "id": null,
        "name": "main",
        "no_overwrite": 1,
        "package_name": "css",
        "project": "src/assets",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import { createApp } from 'vue'",
          "",
          "import App from './App.vue'",
          "const app = createApp(App)",
          "",
          "import router from './router'",
          "",
          "import ElementPlus from 'element-plus'",
          "import 'element-plus/lib/theme-chalk/index.css'",
          "import localeZH from 'element-plus/lib/locale/lang/zh-cn'",
          "",
          "app.use(ElementPlus, { locale:localeZH })",
          "",
          "import './assets/css/icon.css'",
          "",
          "app",
          "    .use(router)",
          "    .mount('#app')"
        ],
        "file_type": "js",
        "id": null,
        "name": "main",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "{",
          "  \"name\": \"SDP\",",
          "  \"version\": \"1.0.0\",",
          "  \"private\": true,",
          "  \"scripts\": {",
          "    \"dev\": \"vite\",",
          "    \"build\": \"vite build\",",
          "    \"serve\": \"vite preview\"",
          "  },",
          "  \"dependencies\": {",
          "    \"axios\": \"^0.21.4\",",
          "    \"glob\": \"^7.2.0\",",
          "    \"js-md5\": \"^0.7.3\",",
          "    \"element-plus\": \"1.0.2-beta.52\",",
          "    \"vue\": \"^3.2.3\",",
          "    \"vue-router\": \"^4.0.10\",",
          "    \"dayjs\": \"^1.10.6\"",
          "  },",
          "  \"devDependencies\": {",
          "    \"@vue/cli-plugin-babel\": \"^4.5.13\",",
          "    \"babel-eslint\": \"^10.1.0\",",
          "    \"@types/node\": \"^16.11.7\",",
          "    \"@vitejs/plugin-vue\": \"^1.2.3\",",
          "    \"@vue/compiler-sfc\": \"^3.1.2\",",
          "    \"vite\": \"2.3.7\"",
          "  },",
          "  \"browserslist\": [",
          "    \"> 1%\",",
          "    \"last 2 versions\",",
          "    \"not dead\"",
          "  ]",
          "}"
        ],
        "file_type": "json",
        "id": null,
        "name": "package",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import axios from 'axios';",
          "",
          "const requestTimeout = 10 * 1000",
          "",
          "import { getStorageValue, tokenName } from '/src/utils'",
          "",
          "const service = axios.create({",
          "    timeout: requestTimeout,",
          "    headers: {",
          "      'Content-Type': 'application/json;charset=UTF-8',",
          "    },",
          "});",
          "",
          "service.interceptors.request.use(",
          "    config => {",
          "        const sessionid = getStorageValue(tokenName)",
          "        if (sessionid) {",
          "            config.headers[tokenName] = sessionid",
          "        }",
          "        if (config.extra_headers) {",
          "            for(let p in config.extra_headers) {",
          "                config.headers[p] = config.extra_headers[p]",
          "            }",
          "        }",
          "        let data = config.data",
          "        if (data) {",
          "            if ('pageSize' in data) {",
          "                data.page_size = data.pageSize",
          "                delete data.pageSize",
          "                if ('pageNo' in data) {",
          "                  data.page_no = data.pageNo",
          "                  delete data.pageNo",
          "                } else {",
          "                  data.page_no = 1",
          "                }",
          "              }",
          "              if ('timeout' in config.data) {",
          "                config.timeout = config.data.timeout",
          "                delete config.data.timeout",
          "              }",
          "      ",
          "              if (sessionid) {",
          "                config.data[tokenName] = sessionid",
          "              }",
          "        }",
          "        return config;",
          "    },",
          "    error => {",
          "        console.error(error)",
          "        return Promise.reject();",
          "    }",
          ");",
          "",
          "service.interceptors.response.use(",
          "    response => {",
          "        if (response.status === 200) {",
          "            return response;",
          "        } else {",
          "            Promise.reject();",
          "        }",
          "    },",
          "    error => {",
          "        console.error(error);",
          "        return Promise.reject();",
          "    }",
          ");",
          "",
          "export default service;"
        ],
        "file_type": "js",
        "id": null,
        "name": "request",
        "no_overwrite": 1,
        "package_name": "utils",
        "project": "src",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "start /b npm run dev",
          "pause"
        ],
        "file_type": "bat",
        "id": null,
        "name": "startup",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      },
      {
        "extra_info": {},
        "file_template": [
          "import vue from '@vitejs/plugin-vue'",
          "",
          "export default {",
          "    plugins: [vue()],",
          "    optimizeDeps: {",
          "    },",
          "    server:{",
          "        proxy: {",
          "            '/api2': {",
          "                target: 'http://localhost:8080',",
          "                changeOrigin: true,",
          "                rewrite: (path) => path.replace(/^\\/api2/, '')",
          "            },",
          "        }   ",
          "    },",
          "    build:{",
          "        rollupOptions:{",
          "          output:{",
          "            manualChunks(id){",
          "              if(id.includes('node_modules')){",
          "                return id.toString().split('node_modules/')[1].split('/')[0].toString();",
          "              }",
          "            }",
          "          }",
          "        }",
          "    }",
          "",
          "}"
        ],
        "file_type": "config.js",
        "id": null,
        "name": "vite",
        "no_overwrite": 1,
        "package_name": "/",
        "project": "/",
        "project_name": "web_static",
        "workspace_name": null
      }
    ],
    "sdp_sql": []
  }
}